// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String           @id @default(cuid())
  email                 String           @unique
  phone                 String?
  firstName             String
  lastName              String
  country               String
  currency              String
  kycStatus             String           @default("PENDING")
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  paymentRequests       PaymentRequest[]
  sentPayments          Payment[]        @relation("SentPayments")
  receivedPayments      Payment[]        @relation("ReceivedPayments")
}

model PaymentRequest {
  id            String    @id @default(cuid())
  requesterId   String
  requester     User      @relation(fields: [requesterId], references: [id])
  amount        Float
  currency      String
  description   String?
  status        String    @default("PENDING") // PENDING, PAID, EXPIRED, CANCELLED
  qrCode        String?
  shareableLink String?   @unique
  expiresAt     DateTime
  paidAt        DateTime?
  paymentId     String?   @unique
  payment       Payment?  @relation(fields: [paymentId], references: [id])
  metadata      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([requesterId])
  @@index([status])
  @@index([expiresAt])
}

model Payment {
  id                String          @id @default(cuid())
  senderId          String
  sender            User            @relation("SentPayments", fields: [senderId], references: [id])
  recipientId       String
  recipient         User            @relation("ReceivedPayments", fields: [recipientId], references: [id])
  amount            Float
  currency          String
  exchangeRate      Float?
  fees              Float           @default(0)
  processorId       String
  settlementMethod  String          // circle, mantle
  status            String          @default("PENDING")
  estimatedCompletion DateTime?
  completedAt       DateTime?
  metadata          Json?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  paymentRequest    PaymentRequest?
}

model Transaction {
  id                    String   @id @default(cuid())
  amount                Float
  sourceCurrency        String
  destCurrency          String
  exchangeRate          Float
  recipientAmount       Float
  status                String   @default("PENDING") // e.g., PENDING, PROCESSING, COMPLETED, FAILED
  stripePaymentIntentId String?  @unique // To link with Stripe
  blockchainTxHash      String?  @unique // To link with the on-chain tx
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
