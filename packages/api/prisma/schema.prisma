// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String   @id // Clerk user ID
  email                 String   @unique
  firstName             String?
  lastName              String?
  phone                 String?
  username              String?  @unique // Optional username for discoverability
  isVerified            Boolean  @default(false)
  isDiscoverable        Boolean  @default(true) // Privacy control for user search
  onboardingCompleted   Boolean  @default(false) // Has completed initial onboarding
  hasVerifiedAccount    Boolean  @default(false) // Computed field for quick checks
  
  // Chilean-specific fields
  country               String?  @default("CL") // ISO country code, defaults to Chile
  rut                   String?  @unique // Chilean RUT (Rol Ãšnico Tributario)
  preferredCurrency     String?  @default("CLP") // Default currency preference
  
  // Bank accounts owned by this user
  bankAccounts          BankAccount[]
  
  // Transactions sent by this user
  sentTransactions      Transaction[] @relation("SentTransactions")
  
  // Transactions received by this user
  receivedTransactions  Transaction[] @relation("ReceivedTransactions")
  
  // Recipients saved by this user
  savedRecipients       SavedRecipient[]
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([email])
  @@index([username])
  @@index([country])
  @@index([rut])
}

model BankAccount {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Account identification
  accountName           String   // User-friendly name for the account
  currency              String   // ISO currency code (USD, EUR, CLP, MXN, GBP)
  country               String   // ISO country code
  
  // Account details (varies by currency/country)
  // European accounts (EUR)
  iban                  String?
  bic                   String?
  
  // US accounts (USD)
  routingNumber         String?
  accountNumber         String?
  
  // Chilean accounts (CLP)
  rut                   String?
  bankCode              String?
  chileanAccountNumber  String? // Chilean bank account number
  
  // Mexican accounts (MXN)
  clabe                 String?
  
  // UK accounts (GBP)
  sortCode              String?
  ukAccountNumber       String?
  
  // Common fields
  bankName              String
  accountHolderName     String
  accountType           String?  // checking, savings
  
  // Verification status
  isVerified            Boolean  @default(false)
  verificationMethod    String?  // micro_deposits, instant, manual, plaid
  verificationData      Json?    // Store verification-specific data
  verificationStartedAt DateTime?
  verifiedAt            DateTime?
  verificationFailures  Int      @default(0)
  
  // Status
  isActive              Boolean  @default(true)
  isPrimary             Boolean  @default(false) // Primary account for this currency
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([userId])
  @@index([currency])
  @@index([userId, currency, isPrimary])
}

model SavedRecipient {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Recipient information
  name                  String
  email                 String
  phone                 String?
  
  // Bank account information
  currency              String   // ISO currency code
  country               String   // ISO country code
  
  // Account details (same structure as BankAccount)
  iban                  String?
  bic                   String?
  routingNumber         String?
  accountNumber         String?
  rut                   String?
  bankCode              String?
  chileanAccountNumber  String? // Chilean bank account number
  clabe                 String?
  sortCode              String?
  ukAccountNumber       String?
  
  bankName              String
  accountHolderName     String
  accountType           String?
  
  // Usage tracking
  isDefault             Boolean  @default(false)
  lastUsedAt            DateTime?
  transferCount         Int      @default(0)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([userId])
  @@index([email])
}

model Transaction {
  id                    String   @id @default(cuid())
  userId                String?  // Sender user ID - nullable for backward compatibility
  recipientUserId       String?  // Recipient user ID for user-to-user transfers
  
  // Relations
  sender                User?    @relation("SentTransactions", fields: [userId], references: [id])
  recipient             User?    @relation("ReceivedTransactions", fields: [recipientUserId], references: [id])
  mantleTransfer        MantleTransfer? // Relation to Mantle-specific data
  
  // Transfer amounts and currency
  amount                Float    // Send amount
  sourceCurrency        String   // Source currency (e.g., CLP)
  destCurrency          String   // Destination currency (e.g., CLP)
  exchangeRate          Float    // Exchange rate (1.0 for CLP to CLP)
  recipientAmount       Float    // Amount recipient receives
  fees                  Float    @default(0) // Total fees charged
  
  // Transfer method and Mantle-specific fields
  transferMethod        String   @default("circle") // circle, mantle
  mantleWalletId        String?  // Mantle wallet ID for blockchain transfers
  mantleTxHash          String?  // Mantle transaction hash
  gasCostUsd            Float?   // Gas cost in USD for Mantle transfers
  networkFeeUsd         Float?   // Network fee in USD for Mantle transfers
  
  // Transfer status and tracking
  status                String   @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED, CANCELLED
  statusHistory         Json     @default("[]") // Array of status changes with timestamps
  description           String?  // Optional transfer description
  
  // Payment method information
  paymentMethodId       String?  // ID of the bank account used for payment
  senderBankAccount     String?  // Sender's bank account identifier
  recipientBankAccount  String?  // Recipient's bank account identifier
  
  // Processing references
  calculationId         String?  // Reference to transfer calculation
  processingReference   String?  @unique // Unique processing reference
  bankTransactionId     String?  // Bank transaction ID
  
  // Legacy payment integration IDs
  stripePaymentIntentId String?  @unique // To link with Stripe
  blockchainTxHash      String?  @unique // To link with the on-chain tx
  
  // Circle integration IDs
  circlePaymentId       String?  @unique
  circleTransferId      String?  @unique
  circlePayoutId        String?  @unique
  
  // Recipient Information (for external transfers or backward compatibility)
  recipientName         String?
  recipientEmail        String?
  recipientPhone        String?
  payoutMethod          String?
  payoutDetails         Json?
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  completedAt           DateTime? // When the transfer was completed
  
  @@index([userId]) // Index for efficient user-specific queries
  @@index([recipientUserId])
  @@index([recipientEmail])
  @@index([status])
  @@index([createdAt])
  @@index([sourceCurrency, destCurrency])
  @@index([transferMethod])
  @@index([mantleWalletId])
}

model MantleTransfer {
  id                    String   @id @default(cuid())
  transferId            String   @unique // Foreign key to Transaction
  transaction           Transaction @relation(fields: [transferId], references: [id], onDelete: Cascade)
  
  // Wallet addresses
  senderWalletAddress   String   // Sender's Mantle wallet address
  recipientWalletAddress String  // Recipient's Mantle wallet address
  
  // Token and amount details
  tokenAddress          String   // Contract address of the token being transferred
  amountWei             String   // Amount in wei (as string to handle large numbers)
  
  // Gas and transaction details
  gasPriceGwei          String?  // Gas price in Gwei (as string)
  gasUsed               String?  // Gas used (as string)
  blockNumber           BigInt?  // Block number where transaction was mined
  transactionHash       String?  @unique // Blockchain transaction hash
  
  // Status tracking
  status                String   @default("PENDING") // PENDING, CONFIRMED, FAILED, CANCELLED
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([transferId])
  @@index([senderWalletAddress])
  @@index([recipientWalletAddress])
  @@index([transactionHash])
  @@index([status])
  @@index([createdAt])
}
