{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/faros/stealth-money/packages/web/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["file:///home/faros/stealth-money/packages/web/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,+bACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OACE;YACF,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,SAAS,OAAO,EACd,SAAS,EACT,OAAO,EACP,IAAI,EACJ,UAAU,KAAK,EACf,GAAG,OAIF;IACD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAE9B,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,yIAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACvD,GAAG,KAAK;;;;;;AAGf;KAnBS","debugId":null}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":["file:///home/faros/stealth-money/packages/web/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n"],"names":[],"mappings":";;;;;;;;;;AAEA;;;AAEA,SAAS,KAAK,EAAE,SAAS,EAAE,GAAG,OAAoC;IAChE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,yIAAA,CAAA,KAAE,AAAD,EACV,qFACA;QAED,GAAG,KAAK;;;;;;AAGf;KAXS;AAaT,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,yIAAA,CAAA,KAAE,AAAD,EACV,8JACA;QAED,GAAG,KAAK;;;;;;AAGf;MAXS;AAaT,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAoC;IACrE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,yIAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,gBAAgB,EAAE,SAAS,EAAE,GAAG,OAAoC;IAC3E,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,yIAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,yIAAA,CAAA,KAAE,AAAD,EACV,kEACA;QAED,GAAG,KAAK;;;;;;AAGf;MAXS;AAaT,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAoC;IACvE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,yIAAA,CAAA,KAAE,AAAD,EAAE,QAAQ;QACrB,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,yIAAA,CAAA,KAAE,AAAD,EAAE,2CAA2C;QACxD,GAAG,KAAK;;;;;;AAGf;MARS","debugId":null}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":["file:///home/faros/stealth-money/packages/web/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAEA;;;AAEA,SAAS,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAsC;IACzE,qBACE,6LAAC;QACC,MAAM;QACN,aAAU;QACV,WAAW,CAAA,GAAA,yIAAA,CAAA,KAAE,AAAD,EACV,mcACA,iFACA,0GACA;QAED,GAAG,KAAK;;;;;;AAGf;KAdS","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/faros/stealth-money/packages/web/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAGA;AAEA;AALA;;;;AAOA,SAAS,MAAM,EACb,SAAS,EACT,GAAG,OAC8C;IACjD,qBACE,6LAAC,oKAAA,CAAA,OAAmB;QAClB,aAAU;QACV,WAAW,CAAA,GAAA,yIAAA,CAAA,KAAE,AAAD,EACV,uNACA;QAED,GAAG,KAAK;;;;;;AAGf;KAdS","debugId":null}},
    {"offset": {"line": 270, "column": 0}, "map": {"version":3,"sources":["file:///home/faros/stealth-money/packages/web/src/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 519, "column": 0}, "map": {"version":3,"sources":["file:///home/faros/stealth-money/packages/web/src/lib/currencies.ts"],"sourcesContent":["/**\n * Currency configuration for multi-currency support\n */\n\nexport interface SupportedCurrency {\n  code: string; // ISO 4217 currency code\n  name: string; // Full currency name\n  symbol: string; // Currency symbol\n  flag: string; // Country flag emoji\n  countries: string[]; // Countries that use this currency\n  minAmount: number; // Minimum transfer amount\n  maxAmount: number; // Maximum transfer amount\n  decimalPlaces: number; // Number of decimal places\n}\n\nexport const SUPPORTED_CURRENCIES: Record<string, SupportedCurrency> = {\n  USD: {\n    code: 'USD',\n    name: 'US Dollar',\n    symbol: '$',\n    flag: '🇺🇸',\n    countries: ['United States'],\n    minAmount: 1,\n    maxAmount: 50000,\n    decimalPlaces: 2\n  },\n  EUR: {\n    code: 'EUR',\n    name: 'Euro',\n    symbol: '€',\n    flag: '🇪🇺',\n    countries: ['Germany', 'France', 'Spain', 'Italy'],\n    minAmount: 1,\n    maxAmount: 45000,\n    decimalPlaces: 2\n  },\n  CLP: {\n    code: 'CLP',\n    name: 'Chilean Peso',\n    symbol: '$',\n    flag: '🇨🇱',\n    countries: ['Chile'],\n    minAmount: 800,\n    maxAmount: 40000000,\n    decimalPlaces: 0\n  },\n  MXN: {\n    code: 'MXN',\n    name: 'Mexican Peso',\n    symbol: '$',\n    flag: '🇲🇽',\n    countries: ['Mexico'],\n    minAmount: 20,\n    maxAmount: 1000000,\n    decimalPlaces: 2\n  },\n  GBP: {\n    code: 'GBP',\n    name: 'British Pound',\n    symbol: '£',\n    flag: '🇬🇧',\n    countries: ['United Kingdom'],\n    minAmount: 1,\n    maxAmount: 40000,\n    decimalPlaces: 2\n  }\n};\n\n// Send currencies (currently only USD)\nexport const SEND_CURRENCIES = ['USD'] as const;\n\n// Receive currencies (all supported except USD)\nexport const RECEIVE_CURRENCIES = ['EUR', 'CLP', 'MXN', 'GBP'] as const;\n\nexport type SendCurrency = typeof SEND_CURRENCIES[number];\nexport type ReceiveCurrency = typeof RECEIVE_CURRENCIES[number];\n\n/**\n * Format currency amount with proper symbol and decimal places\n */\nexport function formatCurrency(amount: number, currencyCode: string): string {\n  const currency = SUPPORTED_CURRENCIES[currencyCode];\n  if (!currency) {\n    return amount.toString();\n  }\n\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currencyCode,\n    minimumFractionDigits: currency.decimalPlaces,\n    maximumFractionDigits: currency.decimalPlaces,\n  }).format(amount);\n}\n\n/**\n * Format number input based on currency decimal places\n */\nexport function formatNumberInput(value: string, currencyCode: string): string {\n  const currency = SUPPORTED_CURRENCIES[currencyCode];\n  if (!currency) {\n    return value;\n  }\n\n  // Remove any non-numeric characters except decimal point\n  const cleaned = value.replace(/[^\\d.]/g, '');\n  \n  // Ensure only one decimal point\n  const parts = cleaned.split('.');\n  if (parts.length > 2) {\n    return parts[0] + '.' + parts[1];\n  }\n  \n  // Limit decimal places based on currency\n  if (currency.decimalPlaces === 0) {\n    // No decimal places allowed\n    return parts[0];\n  } else if (parts[1] && parts[1].length > currency.decimalPlaces) {\n    return parts[0] + '.' + parts[1].substring(0, currency.decimalPlaces);\n  }\n  \n  return cleaned;\n}\n\n/**\n * Validate amount based on currency limits\n */\nexport function validateAmount(amount: number, currencyCode: string): string | null {\n  const currency = SUPPORTED_CURRENCIES[currencyCode];\n  if (!currency) {\n    return 'Unsupported currency';\n  }\n\n  if (amount < currency.minAmount) {\n    return `Amount must be at least ${formatCurrency(currency.minAmount, currencyCode)}`;\n  }\n\n  if (amount > currency.maxAmount) {\n    return `Amount cannot exceed ${formatCurrency(currency.maxAmount, currencyCode)}`;\n  }\n\n  return null;\n}\n\n/**\n * Get currency display name with flag\n */\nexport function getCurrencyDisplayName(currencyCode: string): string {\n  const currency = SUPPORTED_CURRENCIES[currencyCode];\n  if (!currency) {\n    return currencyCode;\n  }\n\n  return `${currency.flag} ${currency.code} - ${currency.name}`;\n}"],"names":[],"mappings":"AAAA;;CAEC;;;;;;;;;AAaM,MAAM,uBAA0D;IACrE,KAAK;QACH,MAAM;QACN,MAAM;QACN,QAAQ;QACR,MAAM;QACN,WAAW;YAAC;SAAgB;QAC5B,WAAW;QACX,WAAW;QACX,eAAe;IACjB;IACA,KAAK;QACH,MAAM;QACN,MAAM;QACN,QAAQ;QACR,MAAM;QACN,WAAW;YAAC;YAAW;YAAU;YAAS;SAAQ;QAClD,WAAW;QACX,WAAW;QACX,eAAe;IACjB;IACA,KAAK;QACH,MAAM;QACN,MAAM;QACN,QAAQ;QACR,MAAM;QACN,WAAW;YAAC;SAAQ;QACpB,WAAW;QACX,WAAW;QACX,eAAe;IACjB;IACA,KAAK;QACH,MAAM;QACN,MAAM;QACN,QAAQ;QACR,MAAM;QACN,WAAW;YAAC;SAAS;QACrB,WAAW;QACX,WAAW;QACX,eAAe;IACjB;IACA,KAAK;QACH,MAAM;QACN,MAAM;QACN,QAAQ;QACR,MAAM;QACN,WAAW;YAAC;SAAiB;QAC7B,WAAW;QACX,WAAW;QACX,eAAe;IACjB;AACF;AAGO,MAAM,kBAAkB;IAAC;CAAM;AAG/B,MAAM,qBAAqB;IAAC;IAAO;IAAO;IAAO;CAAM;AAQvD,SAAS,eAAe,MAAc,EAAE,YAAoB;IACjE,MAAM,WAAW,oBAAoB,CAAC,aAAa;IACnD,IAAI,CAAC,UAAU;QACb,OAAO,OAAO,QAAQ;IACxB;IAEA,OAAO,IAAI,KAAK,YAAY,CAAC,SAAS;QACpC,OAAO;QACP,UAAU;QACV,uBAAuB,SAAS,aAAa;QAC7C,uBAAuB,SAAS,aAAa;IAC/C,GAAG,MAAM,CAAC;AACZ;AAKO,SAAS,kBAAkB,KAAa,EAAE,YAAoB;IACnE,MAAM,WAAW,oBAAoB,CAAC,aAAa;IACnD,IAAI,CAAC,UAAU;QACb,OAAO;IACT;IAEA,yDAAyD;IACzD,MAAM,UAAU,MAAM,OAAO,CAAC,WAAW;IAEzC,gCAAgC;IAChC,MAAM,QAAQ,QAAQ,KAAK,CAAC;IAC5B,IAAI,MAAM,MAAM,GAAG,GAAG;QACpB,OAAO,KAAK,CAAC,EAAE,GAAG,MAAM,KAAK,CAAC,EAAE;IAClC;IAEA,yCAAyC;IACzC,IAAI,SAAS,aAAa,KAAK,GAAG;QAChC,4BAA4B;QAC5B,OAAO,KAAK,CAAC,EAAE;IACjB,OAAO,IAAI,KAAK,CAAC,EAAE,IAAI,KAAK,CAAC,EAAE,CAAC,MAAM,GAAG,SAAS,aAAa,EAAE;QAC/D,OAAO,KAAK,CAAC,EAAE,GAAG,MAAM,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,SAAS,aAAa;IACtE;IAEA,OAAO;AACT;AAKO,SAAS,eAAe,MAAc,EAAE,YAAoB;IACjE,MAAM,WAAW,oBAAoB,CAAC,aAAa;IACnD,IAAI,CAAC,UAAU;QACb,OAAO;IACT;IAEA,IAAI,SAAS,SAAS,SAAS,EAAE;QAC/B,OAAO,CAAC,wBAAwB,EAAE,eAAe,SAAS,SAAS,EAAE,eAAe;IACtF;IAEA,IAAI,SAAS,SAAS,SAAS,EAAE;QAC/B,OAAO,CAAC,qBAAqB,EAAE,eAAe,SAAS,SAAS,EAAE,eAAe;IACnF;IAEA,OAAO;AACT;AAKO,SAAS,uBAAuB,YAAoB;IACzD,MAAM,WAAW,oBAAoB,CAAC,aAAa;IACnD,IAAI,CAAC,UAAU;QACb,OAAO;IACT;IAEA,OAAO,GAAG,SAAS,IAAI,CAAC,CAAC,EAAE,SAAS,IAAI,CAAC,GAAG,EAAE,SAAS,IAAI,EAAE;AAC/D","debugId":null}},
    {"offset": {"line": 666, "column": 0}, "map": {"version":3,"sources":["file:///home/faros/stealth-money/packages/web/src/components/features/TransferCalculator.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useDebounce } from \"use-debounce\";\nimport { z } from \"zod\";\nimport { Calculator, RefreshCw, AlertCircle, DollarSign, Euro, ArrowRightLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  SUPPORTED_CURRENCIES, \n  SEND_CURRENCIES, \n  RECEIVE_CURRENCIES,\n  formatCurrency,\n  formatNumberInput,\n  type SendCurrency,\n  type ReceiveCurrency\n} from \"@/lib/currencies\";\n\n// Dynamic validation schema for transfer calculation\nconst createTransferCalculationSchema = (currency: string, mode: CalculatorMode) => {\n  const currencyConfig = SUPPORTED_CURRENCIES[currency];\n  const fieldName = mode === 'send' ? 'sendAmount' : 'receiveAmount';\n  \n  return z.object({\n    [fieldName]: z.number()\n      .min(currencyConfig.minAmount, `Amount must be at least ${formatCurrency(currencyConfig.minAmount, currency)}`)\n      .max(currencyConfig.maxAmount, `Amount cannot exceed ${formatCurrency(currencyConfig.maxAmount, currency)}`),\n  });\n};\n\ninterface TransferCalculation {\n  sendAmount: number;\n  receiveAmount: number;\n  sendCurrency: string;\n  receiveCurrency: string;\n  exchangeRate: number;\n  fees: number;\n  rateValidUntil: string;\n  breakdown: {\n    sendAmountUSD: number;\n    fees: {\n      cardProcessing: number;\n      transfer: number;\n      payout: number;\n      total: number;\n    };\n    netAmountUSD: number;\n    exchangeRate: number;\n    receiveAmount: number;\n  };\n  estimatedArrival: string;\n  rateId: string;\n}\n\ntype CalculatorMode = 'send' | 'receive';\n\ninterface TransferCalculatorProps {\n  onContinue?: (data: {\n    sendAmount: number;\n    receiveAmount: number;\n    sendCurrency: string;\n    receiveCurrency: string;\n    exchangeRate: number;\n    fees: number;\n    rateId: string;\n    rateValidUntil: string;\n    calculatorMode: CalculatorMode;\n    breakdown: any;\n    estimatedArrival: string;\n  }) => void;\n  isNavigating?: boolean;\n  showTitle?: boolean;\n  publicMode?: boolean;\n}\n\nexport function TransferCalculator({ \n  onContinue, \n  isNavigating = false, \n  showTitle = true, \n  publicMode = false \n}: TransferCalculatorProps) {\n  // Component state\n  const [calculatorMode, setCalculatorMode] = useState<CalculatorMode>('send');\n  const [inputAmount, setInputAmount] = useState<string>('');\n  const [sendCurrency, setSendCurrency] = useState<SendCurrency>('USD');\n  const [receiveCurrency, setReceiveCurrency] = useState<ReceiveCurrency>('EUR');\n  const [calculation, setCalculation] = useState<TransferCalculation | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [validationError, setValidationError] = useState<string | null>(null);\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\n\n  // Debounced values to avoid excessive API calls\n  const [debouncedInputAmount] = useDebounce(inputAmount, 500);\n  const [debouncedCalculatorMode] = useDebounce(calculatorMode, 300);\n  const [debouncedSendCurrency] = useDebounce(sendCurrency, 300);\n  const [debouncedReceiveCurrency] = useDebounce(receiveCurrency, 300);\n\n  // Calculate transfer using API\n  const calculateTransfer = async (amount: string, mode: CalculatorMode, fromCurrency: SendCurrency, toCurrency: ReceiveCurrency) => {\n    if (!amount || amount === '0' || amount === '') {\n      setCalculation(null);\n      return;\n    }\n\n    const numericAmount = parseFloat(amount);\n    \n    // Validate amount using dynamic schema based on mode\n    try {\n      const validationCurrency = mode === 'send' ? fromCurrency : toCurrency;\n      const schema = createTransferCalculationSchema(validationCurrency, mode);\n      const fieldName = mode === 'send' ? 'sendAmount' : 'receiveAmount';\n      schema.parse({ [fieldName]: numericAmount });\n      setValidationError(null);\n    } catch (err) {\n      if (err instanceof z.ZodError) {\n        setValidationError(err.issues?.[0]?.message || 'Invalid amount');\n        setCalculation(null);\n        return;\n      }\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000';\n      \n      // TEMPORARY: Backend only supports sendAmount mode currently\n      // For \"receive\" mode, we need to estimate the send amount first\n      let requestBody;\n      let estimatedSendAmount = numericAmount;\n      \n      if (mode === 'receive') {\n        // Rough estimation: assume 10% fees and current exchange rate of ~0.85 for USD->EUR\n        // This is a temporary workaround until backend supports receiveAmount\n        const roughExchangeRate = toCurrency === 'EUR' ? 0.85 : \n                                 toCurrency === 'GBP' ? 0.80 : \n                                 toCurrency === 'CLP' ? 800 : \n                                 toCurrency === 'MXN' ? 20 : 0.85;\n        estimatedSendAmount = Math.ceil((numericAmount / roughExchangeRate) * 1.1);\n      }\n      \n      requestBody = {\n        sendAmount: estimatedSendAmount,\n        sendCurrency: fromCurrency,\n        receiveCurrency: toCurrency,\n        calculatorMode: 'send' // Always send as 'send' mode for now\n      };\n\n      const response = await fetch(`${API_URL}/api/transfers/calculate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || 'Failed to calculate transfer');\n      }\n\n      const data: TransferCalculation = await response.json();\n      \n      // If we're in \"receive\" mode, we need to adjust the calculation\n      // to match the desired receive amount as closely as possible\n      if (mode === 'receive') {\n        const actualReceiveAmount = data.receiveAmount;\n        const targetReceiveAmount = numericAmount;\n        \n        if (Math.abs(actualReceiveAmount - targetReceiveAmount) > targetReceiveAmount * 0.05) {\n          // If we're off by more than 5%, try to adjust\n          const adjustmentFactor = targetReceiveAmount / actualReceiveAmount;\n          const adjustedSendAmount = Math.ceil(data.sendAmount * adjustmentFactor);\n          \n          // Make a second API call with the adjusted amount\n          const adjustedRequestBody = {\n            sendAmount: adjustedSendAmount,\n            sendCurrency: fromCurrency,\n            receiveCurrency: toCurrency,\n            calculatorMode: 'send'\n          };\n          \n          const adjustedResponse = await fetch(`${API_URL}/api/transfers/calculate`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(adjustedRequestBody),\n          });\n          \n          if (adjustedResponse.ok) {\n            const adjustedData = await adjustedResponse.json();\n            setCalculation(adjustedData);\n            setLastUpdated(new Date());\n            return;\n          }\n        }\n      }\n      \n      setCalculation(data);\n      setLastUpdated(new Date());\n    } catch (err) {\n      console.error('Transfer calculation error:', err);\n      setError(err instanceof Error ? err.message : 'Failed to calculate transfer');\n      setCalculation(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Effect to calculate transfer when amount, mode, or currencies change\n  useEffect(() => {\n    // Calculate when amount or currencies change\n    if (debouncedInputAmount && debouncedInputAmount !== '0' && debouncedInputAmount !== '') {\n      calculateTransfer(debouncedInputAmount, debouncedCalculatorMode, debouncedSendCurrency, debouncedReceiveCurrency);\n    }\n  }, [debouncedInputAmount, debouncedCalculatorMode, debouncedSendCurrency, debouncedReceiveCurrency]);\n\n  // Handle amount input change\n  const handleAmountChange = (value: string) => {\n    const validationCurrency = calculatorMode === 'send' ? sendCurrency : receiveCurrency;\n    const formatted = formatNumberInput(value, validationCurrency);\n    setInputAmount(formatted);\n  };\n\n  // Handle calculator mode toggle\n  const handleModeToggle = () => {\n    const newMode = calculatorMode === 'send' ? 'receive' : 'send';\n    setCalculatorMode(newMode);\n    \n    // If we have a calculation, preserve the amount by switching to the opposite field\n    if (calculation) {\n      if (newMode === 'receive') {\n        // Switching to \"Recipient Gets\" mode, use the current receive amount\n        setInputAmount(calculation.receiveAmount.toString());\n      } else {\n        // Switching to \"You Send\" mode, use the current send amount\n        setInputAmount(calculation.sendAmount.toString());\n      }\n    }\n  };\n\n  // Handle continue button click\n  const handleContinue = () => {\n    if (calculation && onContinue) {\n      onContinue({\n        sendAmount: calculation.sendAmount,\n        receiveAmount: calculation.receiveAmount,\n        sendCurrency: sendCurrency,\n        receiveCurrency: receiveCurrency,\n        exchangeRate: calculation.exchangeRate,\n        fees: calculation.fees,\n        rateId: calculation.rateId,\n        rateValidUntil: calculation.rateValidUntil,\n        calculatorMode: calculatorMode,\n        breakdown: calculation.breakdown,\n        estimatedArrival: calculation.estimatedArrival\n      });\n    }\n  };\n\n  // Check if rate is about to expire (within 2 minutes)\n  const isRateExpiringSoon = calculation && calculation.rateValidUntil ? \n    new Date(calculation.rateValidUntil).getTime() - Date.now() < 2 * 60 * 1000 : false;\n\n  return (\n    <Card className=\"w-full max-w-lg mx-auto\">\n      {showTitle && (\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"flex items-center justify-center gap-2\">\n            <Calculator className=\"h-5 w-5\" />\n            Transfer Calculator\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Calculate how much your recipient will receive\n          </p>\n        </CardHeader>\n      )}\n      <CardContent className=\"space-y-6\">\n        {/* Calculator Mode Switcher */}\n        <div className=\"flex items-center justify-center\">\n          <div className=\"bg-gray-100 rounded-lg p-1 flex\">\n            <button\n              onClick={handleModeToggle}\n              className={`px-4 py-2 rounded-md text-sm font-medium transition-all ${\n                calculatorMode === 'send'\n                  ? 'bg-white text-gray-900 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              <div className=\"flex items-center gap-2\">\n                <DollarSign className=\"h-4 w-4\" />\n                You Send\n              </div>\n            </button>\n            <button\n              onClick={handleModeToggle}\n              className={`px-4 py-2 rounded-md text-sm font-medium transition-all ${\n                calculatorMode === 'receive'\n                  ? 'bg-white text-gray-900 shadow-sm'\n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              <div className=\"flex items-center gap-2\">\n                <Euro className=\"h-4 w-4\" />\n                Recipient Gets\n              </div>\n            </button>\n          </div>\n        </div>\n\n        {/* Input Amount and Currency */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <Label className=\"flex items-center gap-2\">\n              {calculatorMode === 'send' ? (\n                <>\n                  <DollarSign className=\"h-4 w-4\" />\n                  You send\n                </>\n              ) : (\n                <>\n                  <Euro className=\"h-4 w-4\" />\n                  Recipient gets\n                </>\n              )}\n            </Label>\n          </div>\n          \n          <div className=\"flex gap-3\">\n            <div className=\"flex-1\">\n              <Input\n                id=\"input-amount\"\n                type=\"text\"\n                placeholder={\n                  calculatorMode === 'send'\n                    ? `Enter amount to send (${SUPPORTED_CURRENCIES[sendCurrency].decimalPlaces === 0 ? \"e.g. 1000\" : \"e.g. 100.00\"})`\n                    : `Enter amount recipient gets (${SUPPORTED_CURRENCIES[receiveCurrency].decimalPlaces === 0 ? \"e.g. 1000\" : \"e.g. 100.00\"})`\n                }\n                value={inputAmount}\n                onChange={(e) => handleAmountChange(e.target.value)}\n                className={`text-lg font-medium ${validationError ? 'border-red-500' : ''}`}\n              />\n            </div>\n            <div className=\"w-32\">\n              {calculatorMode === 'send' ? (\n                <Select value={sendCurrency} onValueChange={(value) => setSendCurrency(value as SendCurrency)}>\n                  <SelectTrigger className=\"h-10\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {SEND_CURRENCIES.map((currency) => (\n                      <SelectItem key={currency} value={currency}>\n                        <div className=\"flex items-center gap-2\">\n                          <span>{SUPPORTED_CURRENCIES[currency].flag}</span>\n                          <span>{currency}</span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              ) : (\n                <Select value={receiveCurrency} onValueChange={(value) => setReceiveCurrency(value as ReceiveCurrency)}>\n                  <SelectTrigger className=\"h-10\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {RECEIVE_CURRENCIES.map((currency) => (\n                      <SelectItem key={currency} value={currency}>\n                        <div className=\"flex items-center gap-2\">\n                          <span>{SUPPORTED_CURRENCIES[currency].flag}</span>\n                          <span>{currency}</span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              )}\n            </div>\n          </div>\n          \n          {validationError && (\n            <p className=\"text-sm text-red-500 flex items-center gap-1\">\n              <AlertCircle className=\"h-3 w-3\" />\n              {validationError}\n            </p>\n          )}\n        </div>\n\n        {/* Currency Exchange Arrow */}\n        <div className=\"flex justify-center\">\n          <div className=\"bg-gray-100 rounded-full p-2\">\n            <ArrowRightLeft className=\"h-4 w-4 text-gray-600\" />\n          </div>\n        </div>\n\n        {/* Output Amount and Currency */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <Label className=\"flex items-center gap-2\">\n              {calculatorMode === 'send' ? (\n                <>\n                  <Euro className=\"h-4 w-4\" />\n                  Recipient gets\n                </>\n              ) : (\n                <>\n                  <DollarSign className=\"h-4 w-4\" />\n                  You send\n                </>\n              )}\n            </Label>\n          </div>\n          \n          <div className=\"flex gap-3\">\n            <div className=\"flex-1\">\n              <div className=\"h-10 px-3 py-2 border border-input bg-gray-50 rounded-md flex items-center text-lg font-medium text-muted-foreground\">\n                {calculation ? (\n                  calculatorMode === 'send' \n                    ? formatCurrency(calculation.receiveAmount, receiveCurrency)\n                    : formatCurrency(calculation.sendAmount, sendCurrency)\n                ) : (\n                  <span className=\"text-sm\">\n                    {calculatorMode === 'send' \n                      ? 'Amount recipient will receive'\n                      : 'Amount you need to send'\n                    }\n                  </span>\n                )}\n              </div>\n            </div>\n            <div className=\"w-32\">\n              {calculatorMode === 'send' ? (\n                <Select value={receiveCurrency} onValueChange={(value) => setReceiveCurrency(value as ReceiveCurrency)}>\n                  <SelectTrigger className=\"h-10\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {RECEIVE_CURRENCIES.map((currency) => (\n                      <SelectItem key={currency} value={currency}>\n                        <div className=\"flex items-center gap-2\">\n                          <span>{SUPPORTED_CURRENCIES[currency].flag}</span>\n                          <span>{currency}</span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              ) : (\n                <Select value={sendCurrency} onValueChange={(value) => setSendCurrency(value as SendCurrency)}>\n                  <SelectTrigger className=\"h-10\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {SEND_CURRENCIES.map((currency) => (\n                      <SelectItem key={currency} value={currency}>\n                        <div className=\"flex items-center gap-2\">\n                          <span>{SUPPORTED_CURRENCIES[currency].flag}</span>\n                          <span>{currency}</span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Empty State Guidance */}\n        {!inputAmount && !isLoading && !error && (\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 text-blue-700 mb-2\">\n              <Calculator className=\"h-4 w-4\" />\n              <span className=\"font-medium\">Get Started</span>\n            </div>\n            <p className=\"text-sm text-blue-600 mb-3\">\n              Enter an amount above to see how much your recipient will receive and the total cost including fees.\n            </p>\n            <div className=\"space-y-2 text-xs text-blue-600\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"w-2 h-2 bg-blue-400 rounded-full\"></span>\n                <span>Real-time exchange rates</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"w-2 h-2 bg-blue-400 rounded-full\"></span>\n                <span>Transparent fee breakdown</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"w-2 h-2 bg-blue-400 rounded-full\"></span>\n                <span>Fast international transfers</span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Calculation Results */}\n        {isLoading && (\n          <div className=\"flex items-center justify-center py-8\">\n            <RefreshCw className=\"h-6 w-6 animate-spin text-muted-foreground\" />\n            <span className=\"ml-2 text-muted-foreground\">Calculating...</span>\n          </div>\n        )}\n\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 text-red-700\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span className=\"font-medium\">Calculation Error</span>\n            </div>\n            <p className=\"text-sm text-red-600 mt-1\">{error}</p>\n          </div>\n        )}\n\n        {calculation && !isLoading && !error && (\n          <div className=\"space-y-4\">\n            {/* Recipient Amount */}\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-lg\">{SUPPORTED_CURRENCIES[receiveCurrency].flag}</span>\n                  <span className=\"text-sm font-medium text-green-700\">Recipient gets</span>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-2xl font-bold text-green-700\">\n                    {formatCurrency(calculation.receiveAmount, receiveCurrency)}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Exchange Rate Info */}\n            <div className=\"space-y-3 pt-2 border-t\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Exchange rate</span>\n                <div className=\"text-right\">\n                  <div className=\"text-sm font-medium\">\n                    1 {sendCurrency} = {calculation.exchangeRate.toFixed(SUPPORTED_CURRENCIES[receiveCurrency].decimalPlaces === 0 ? 0 : 4)} {receiveCurrency}\n                  </div>\n                  {isRateExpiringSoon && (\n                    <div className=\"text-xs text-amber-600 flex items-center gap-1\">\n                      <AlertCircle className=\"h-3 w-3\" />\n                      Rate expires soon\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Total fees</span>\n                <span className=\"text-sm font-medium\">\n                  {formatCurrency(calculation.fees, sendCurrency)}\n                </span>\n              </div>\n\n              {/* Fee Breakdown */}\n              <div className=\"space-y-1 pl-4 border-l-2 border-gray-100\">\n                <div className=\"flex justify-between text-xs text-muted-foreground\">\n                  <span>Card processing</span>\n                  <span>{formatCurrency(calculation.breakdown.fees.cardProcessing, sendCurrency)}</span>\n                </div>\n                <div className=\"flex justify-between text-xs text-muted-foreground\">\n                  <span>Transfer fee</span>\n                  <span>{formatCurrency(calculation.breakdown.fees.transfer, sendCurrency)}</span>\n                </div>\n                <div className=\"flex justify-between text-xs text-muted-foreground\">\n                  <span>Payout fee</span>\n                  <span>{formatCurrency(calculation.breakdown.fees.payout, sendCurrency)}</span>\n                </div>\n              </div>\n\n              <div className=\"flex justify-between items-center pt-2 border-t\">\n                <span className=\"text-sm font-medium\">Total to pay</span>\n                <span className=\"text-lg font-bold\">\n                  {formatCurrency(calculation.sendAmount + calculation.fees, sendCurrency)}\n                </span>\n              </div>\n\n              <div className=\"flex justify-between items-center text-xs text-muted-foreground\">\n                <span>Estimated arrival</span>\n                <span>{new Date(calculation.estimatedArrival).toLocaleString()}</span>\n              </div>\n            </div>\n\n            {/* Last Updated */}\n            {lastUpdated && (\n              <div className=\"text-xs text-muted-foreground text-center\">\n                Last updated: {lastUpdated.toLocaleTimeString()}\n              </div>\n            )}\n\n            {/* Continue Button */}\n            {onContinue && (\n              <Button \n                onClick={handleContinue}\n                disabled={isNavigating}\n                className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground font-semibold shadow-lg\"\n                size=\"lg\"\n              >\n                {isNavigating ? (\n                  <>\n                    <RefreshCw className=\"h-4 w-4 animate-spin mr-2\" />\n                    Processing...\n                  </>\n                ) : (\n                  'Continue with this rate'\n                )}\n              </Button>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1947, "column": 0}, "map": {"version":3,"sources":["file:///home/faros/stealth-money/packages/web/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants } "],"names":[],"mappings":";;;;;AACA;AACA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,6LAAC;QAAI,WAAW,CAAA,GAAA,yIAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE;KAJS","debugId":null}},
    {"offset": {"line": 1995, "column": 0}, "map": {"version":3,"sources":["file:///home/faros/stealth-money/packages/web/src/components/features/UserRecipientSelector.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Search, \n  User, \n  Mail, \n  Phone, \n  CreditCard, \n  Clock, \n  Star,\n  CheckCircle,\n  AlertCircle,\n  Loader2,\n  ArrowLeft,\n  ArrowRight,\n  Users\n} from \"lucide-react\";\n\n// Types for user-to-user transfers\nexport interface UserProfile {\n  id: string;\n  email: string;\n  username?: string;\n  phone?: string;\n  firstName?: string;\n  lastName?: string;\n  fullName: string;\n  profileImageUrl?: string;\n  isVerified: boolean;\n  verifiedPaymentMethods: VerifiedPaymentMethod[];\n  supportedCurrencies: string[];\n  lastActiveAt?: string;\n  createdAt: string;\n}\n\nexport interface VerifiedPaymentMethod {\n  id: string;\n  type: 'bank_account' | 'mobile_wallet' | 'debit_card';\n  currency: string;\n  bankName?: string;\n  accountType?: string;\n  lastFourDigits?: string;\n  isDefault: boolean;\n  verifiedAt: string;\n  country: string;\n}\n\nexport interface RecentRecipient {\n  id: string;\n  userId: string;\n  userProfile: UserProfile;\n  lastTransferAt: string;\n  transferCount: number;\n  totalAmountSent: number;\n  averageAmount: number;\n  preferredCurrency: string;\n  isFrequent: boolean;\n  isFavorite: boolean;\n}\n\nexport interface UserSearchResult {\n  users: UserProfile[];\n  total: number;\n  hasMore: boolean;\n}\n\nexport interface UserRecipientSelectorProps {\n  transferData: {\n    sendAmount: number;\n    receiveAmount: number;\n    sendCurrency: string;\n    receiveCurrency: string;\n    exchangeRate: number;\n    fees: number;\n  };\n  onRecipientSelected: (recipient: UserProfile, paymentMethod: VerifiedPaymentMethod) => void;\n  onBack: () => void;\n  currentUserId?: string;\n  isLoading?: boolean;\n}\n\nexport function UserRecipientSelector({\n  transferData,\n  onRecipientSelected,\n  onBack,\n  currentUserId,\n  isLoading = false\n}: UserRecipientSelectorProps) {\n  \n  // Search state\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState<UserProfile[]>([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchError, setSearchError] = useState<string | null>(null);\n  const [hasSearched, setHasSearched] = useState(false);\n  \n  // Recent recipients state\n  const [recentRecipients, setRecentRecipients] = useState<RecentRecipient[]>([]);\n  const [isLoadingRecents, setIsLoadingRecents] = useState(false);\n  const [recentsError, setRecentsError] = useState<string | null>(null);\n  \n  // Selected recipient state\n  const [selectedRecipient, setSelectedRecipient] = useState<UserProfile | null>(null);\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<VerifiedPaymentMethod | null>(null);\n  \n  // UI state\n  const [activeTab, setActiveTab] = useState<'search' | 'recent'>('recent');\n\n  // Load recent recipients on component mount\n  useEffect(() => {\n    if (currentUserId) {\n      loadRecentRecipients();\n    }\n  }, [currentUserId]);\n\n  // Debounced search effect\n  useEffect(() => {\n    if (searchQuery.trim().length >= 2) {\n      const timeoutId = setTimeout(() => {\n        performUserSearch(searchQuery.trim());\n      }, 500);\n      \n      return () => clearTimeout(timeoutId);\n    } else {\n      setSearchResults([]);\n      setHasSearched(false);\n      setSearchError(null);\n    }\n  }, [searchQuery]);\n\n  // Load recent recipients\n  const loadRecentRecipients = useCallback(async () => {\n    if (!currentUserId) return;\n    \n    setIsLoadingRecents(true);\n    setRecentsError(null);\n    \n    try {\n      const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000';\n      const response = await fetch(`${API_URL}/api/users/me/recipients`, {\n        headers: {\n          'Authorization': `Bearer ${await getAuthToken()}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to load recent recipients');\n      }\n\n      const data = await response.json();\n      setRecentRecipients(data.recipients || []);\n    } catch (error) {\n      console.error('Error loading recent recipients:', error);\n      setRecentsError('Failed to load recent recipients');\n      setRecentRecipients([]);\n    } finally {\n      setIsLoadingRecents(false);\n    }\n  }, [currentUserId]);\n\n  // Perform user search\n  const performUserSearch = useCallback(async (query: string) => {\n    setIsSearching(true);\n    setSearchError(null);\n    \n    try {\n      const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000';\n      const searchParams = new URLSearchParams({\n        q: query,\n        currency: transferData.receiveCurrency,\n        limit: '10'\n      });\n      \n      const response = await fetch(`${API_URL}/api/users/search?${searchParams}`, {\n        headers: {\n          'Authorization': `Bearer ${await getAuthToken()}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to search users');\n      }\n\n      const data: UserSearchResult = await response.json();\n      \n      // Filter out current user from results\n      const filteredUsers = data.users.filter(user => user.id !== currentUserId);\n      \n      setSearchResults(filteredUsers);\n      setHasSearched(true);\n    } catch (error) {\n      console.error('Error searching users:', error);\n      setSearchError('Failed to search users. Please try again.');\n      setSearchResults([]);\n    } finally {\n      setIsSearching(false);\n    }\n  }, [transferData.receiveCurrency, currentUserId]);\n\n  // Get authentication token from Clerk\n  const getAuthToken = async (): Promise<string> => {\n    if (typeof window === 'undefined') return '';\n    \n    try {\n      // Get token from Clerk auth context\n      const token = sessionStorage.getItem('__clerk_token') || \n                   localStorage.getItem('__clerk_token') ||\n                   'mock-token'; // Fallback for development\n      return token;\n    } catch (error) {\n      console.warn('Failed to get auth token:', error);\n      return 'mock-token';\n    }\n  };\n\n  // Handle recipient selection\n  const handleRecipientClick = (recipient: UserProfile) => {\n    setSelectedRecipient(recipient);\n    \n    // Auto-select the default payment method for the target currency\n    const compatibleMethods = recipient.verifiedPaymentMethods.filter(\n      method => method.currency === transferData.receiveCurrency\n    );\n    \n    const defaultMethod = compatibleMethods.find(method => method.isDefault) || compatibleMethods[0];\n    \n    if (defaultMethod) {\n      setSelectedPaymentMethod(defaultMethod);\n    }\n  };\n\n  // Handle payment method selection\n  const handlePaymentMethodSelect = (method: VerifiedPaymentMethod) => {\n    setSelectedPaymentMethod(method);\n  };\n\n  // Handle continue with selected recipient\n  const handleContinue = () => {\n    if (selectedRecipient && selectedPaymentMethod) {\n      onRecipientSelected(selectedRecipient, selectedPaymentMethod);\n    }\n  };\n\n  // Render user profile card\n  const renderUserProfile = (user: UserProfile, isRecent = false, recentData?: RecentRecipient) => {\n    const compatibleMethods = user.verifiedPaymentMethods.filter(\n      method => method.currency === transferData.receiveCurrency\n    );\n    \n    const isSelected = selectedRecipient?.id === user.id;\n    \n    return (\n      <Card \n        key={user.id} \n        className={`cursor-pointer transition-all hover:shadow-md ${\n          isSelected ? 'ring-2 ring-blue-500 bg-blue-50' : ''\n        }`}\n        onClick={() => handleRecipientClick(user)}\n      >\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-start space-x-3\">\n            {/* Profile Image or Avatar */}\n            <div className=\"flex-shrink-0\">\n              {user.profileImageUrl ? (\n                <img\n                  src={user.profileImageUrl}\n                  alt={user.fullName}\n                  className=\"w-12 h-12 rounded-full object-cover\"\n                />\n              ) : (\n                <div className=\"w-12 h-12 rounded-full bg-gray-200 flex items-center justify-center\">\n                  <User className=\"w-6 h-6 text-gray-500\" />\n                </div>\n              )}\n            </div>\n            \n            {/* User Info */}\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center space-x-2 mb-1\">\n                <h3 className=\"text-sm font-semibold text-gray-900 truncate\">\n                  {user.fullName}\n                </h3>\n                {user.isVerified && (\n                  <CheckCircle className=\"w-4 h-4 text-green-500 flex-shrink-0\" />\n                )}\n                {isRecent && recentData?.isFavorite && (\n                  <Star className=\"w-4 h-4 text-yellow-500 flex-shrink-0\" />\n                )}\n              </div>\n              \n              <div className=\"flex items-center space-x-4 text-xs text-gray-500 mb-2\">\n                {user.email && (\n                  <div className=\"flex items-center space-x-1\">\n                    <Mail className=\"w-3 h-3\" />\n                    <span className=\"truncate\">{user.email}</span>\n                  </div>\n                )}\n                {user.username && (\n                  <div className=\"flex items-center space-x-1\">\n                    <span>@{user.username}</span>\n                  </div>\n                )}\n              </div>\n              \n              {/* Recent transfer info */}\n              {isRecent && recentData && (\n                <div className=\"flex items-center space-x-4 text-xs text-gray-500 mb-2\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Clock className=\"w-3 h-3\" />\n                    <span>Last: {new Date(recentData.lastTransferAt).toLocaleDateString()}</span>\n                  </div>\n                  <div>\n                    {recentData.transferCount} transfer{recentData.transferCount !== 1 ? 's' : ''}\n                  </div>\n                </div>\n              )}\n              \n              {/* Supported currencies */}\n              <div className=\"flex flex-wrap gap-1 mb-2\">\n                {user.supportedCurrencies.map(currency => (\n                  <Badge \n                    key={currency} \n                    variant={currency === transferData.receiveCurrency ? \"default\" : \"secondary\"}\n                    className=\"text-xs\"\n                  >\n                    {currency}\n                  </Badge>\n                ))}\n              </div>\n              \n              {/* Compatible payment methods */}\n              {compatibleMethods.length > 0 ? (\n                <div className=\"text-xs text-green-600\">\n                  ✓ {compatibleMethods.length} verified account{compatibleMethods.length !== 1 ? 's' : ''} for {transferData.receiveCurrency}\n                </div>\n              ) : (\n                <div className=\"text-xs text-red-600\">\n                  ✗ No verified accounts for {transferData.receiveCurrency}\n                </div>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  // Render payment method selection\n  const renderPaymentMethodSelection = () => {\n    if (!selectedRecipient) return null;\n    \n    const compatibleMethods = selectedRecipient.verifiedPaymentMethods.filter(\n      method => method.currency === transferData.receiveCurrency\n    );\n    \n    if (compatibleMethods.length === 0) {\n      return (\n        <Card className=\"border-red-200 bg-red-50\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2 text-red-700\">\n              <AlertCircle className=\"w-4 h-4\" />\n              <span className=\"font-medium\">No Compatible Payment Methods</span>\n            </div>\n            <p className=\"text-red-600 text-sm mt-1\">\n              {selectedRecipient.fullName} doesn't have any verified accounts that can receive {transferData.receiveCurrency}.\n            </p>\n          </CardContent>\n        </Card>\n      );\n    }\n    \n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-sm\">Select Payment Method</CardTitle>\n          <p className=\"text-xs text-gray-600\">\n            Choose how {selectedRecipient.fullName} should receive the {transferData.receiveCurrency}\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-2\">\n          {compatibleMethods.map(method => (\n            <div\n              key={method.id}\n              className={`p-3 border rounded-lg cursor-pointer transition-all ${\n                selectedPaymentMethod?.id === method.id\n                  ? 'border-blue-500 bg-blue-50'\n                  : 'border-gray-200 hover:border-gray-300'\n              }`}\n              onClick={() => handlePaymentMethodSelect(method)}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <CreditCard className=\"w-4 h-4 text-gray-500\" />\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm font-medium\">\n                      {method.bankName || `${method.type.replace('_', ' ')}`}\n                    </span>\n                    {method.isDefault && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">Default</Badge>\n                    )}\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    {method.accountType} • {method.currency} • {method.country}\n                    {method.lastFourDigits && ` • ****${method.lastFourDigits}`}\n                  </div>\n                  <div className=\"text-xs text-gray-400\">\n                    Verified {new Date(method.verifiedAt).toLocaleDateString()}\n                  </div>\n                </div>\n                {selectedPaymentMethod?.id === method.id && (\n                  <CheckCircle className=\"w-4 h-4 text-blue-500\" />\n                )}\n              </div>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <div className=\"w-full max-w-4xl mx-auto space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Users className=\"h-5 w-5\" />\n            <span>Send to User</span>\n          </CardTitle>\n          <p className=\"text-sm text-gray-600\">\n            Send {transferData.sendAmount} {transferData.sendCurrency} to a registered user\n          </p>\n        </CardHeader>\n      </Card>\n\n      {/* Transfer Summary */}\n      <Card className=\"bg-gray-50\">\n        <CardContent className=\"p-4\">\n          <h3 className=\"font-semibold mb-2\">Transfer Summary</h3>\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">You Send:</span>\n              <span className=\"font-medium\">{transferData.sendAmount} {transferData.sendCurrency}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">They Receive:</span>\n              <span className=\"font-medium\">{transferData.receiveAmount} {transferData.receiveCurrency}</span>\n            </div>\n            <div className=\"flex justify-between col-span-2\">\n              <span className=\"text-gray-600\">Exchange Rate:</span>\n              <span className=\"font-medium\">1 {transferData.sendCurrency} = {transferData.exchangeRate.toFixed(4)} {transferData.receiveCurrency}</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tab Navigation */}\n      <div className=\"flex space-x-1 bg-gray-100 p-1 rounded-lg\">\n        <button\n          className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${\n            activeTab === 'recent'\n              ? 'bg-white text-gray-900 shadow-sm'\n              : 'text-gray-600 hover:text-gray-900'\n          }`}\n          onClick={() => setActiveTab('recent')}\n        >\n          <Clock className=\"w-4 h-4 inline mr-2\" />\n          Recent Recipients\n        </button>\n        <button\n          className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${\n            activeTab === 'search'\n              ? 'bg-white text-gray-900 shadow-sm'\n              : 'text-gray-600 hover:text-gray-900'\n          }`}\n          onClick={() => setActiveTab('search')}\n        >\n          <Search className=\"w-4 h-4 inline mr-2\" />\n          Search Users\n        </button>\n      </div>\n\n      {/* Tab Content */}\n      <div className=\"space-y-4\">\n        {activeTab === 'search' && (\n          <>\n            {/* Search Input */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"user-search\">Search by email, username, or phone</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"user-search\"\n                  placeholder=\"Enter email, username, or phone number...\"\n                  className=\"pl-10\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                />\n                {isSearching && (\n                  <Loader2 className=\"absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 animate-spin text-gray-400\" />\n                )}\n              </div>\n            </div>\n\n            {/* Search Results */}\n            {searchError && (\n              <Card className=\"border-red-200 bg-red-50\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center space-x-2 text-red-700\">\n                    <AlertCircle className=\"w-4 h-4\" />\n                    <span>{searchError}</span>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {hasSearched && !isSearching && searchResults.length === 0 && !searchError && (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <Users className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No users found</h3>\n                  <p className=\"text-gray-600\">\n                    No users found matching \"{searchQuery}\". Try a different search term.\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n\n            {searchResults.length > 0 && (\n              <div className=\"space-y-3\">\n                <h3 className=\"text-sm font-medium text-gray-700\">\n                  Search Results ({searchResults.length})\n                </h3>\n                {searchResults.map(user => renderUserProfile(user))}\n              </div>\n            )}\n          </>\n        )}\n\n        {activeTab === 'recent' && (\n          <>\n            {recentsError && (\n              <Card className=\"border-red-200 bg-red-50\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center space-x-2 text-red-700\">\n                    <AlertCircle className=\"w-4 h-4\" />\n                    <span>{recentsError}</span>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {isLoadingRecents ? (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <Loader2 className=\"w-8 h-8 animate-spin text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600\">Loading recent recipients...</p>\n                </CardContent>\n              </Card>\n            ) : recentRecipients.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <Clock className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No recent recipients</h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    You haven't sent money to any users yet. Use the search tab to find someone to send money to.\n                  </p>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setActiveTab('search')}\n                  >\n                    <Search className=\"w-4 h-4 mr-2\" />\n                    Search Users\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-3\">\n                <h3 className=\"text-sm font-medium text-gray-700\">\n                  Recent Recipients ({recentRecipients.length})\n                </h3>\n                {recentRecipients.map(recent => \n                  renderUserProfile(recent.userProfile, true, recent)\n                )}\n              </div>\n            )}\n          </>\n        )}\n      </div>\n\n      {/* Payment Method Selection */}\n      {selectedRecipient && (\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Selected Recipient</h3>\n          {renderUserProfile(selectedRecipient)}\n          {renderPaymentMethodSelection()}\n        </div>\n      )}\n\n      {/* Action Buttons */}\n      <div className=\"flex justify-between\">\n        <Button\n          variant=\"outline\"\n          onClick={onBack}\n          disabled={isLoading}\n        >\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          Back\n        </Button>\n        \n        <Button\n          onClick={handleContinue}\n          disabled={!selectedRecipient || !selectedPaymentMethod || isLoading}\n        >\n          {isLoading ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Processing...\n            </>\n          ) : (\n            <>\n              Continue to Payment\n              <ArrowRight className=\"ml-2 h-4 w-4\" />\n            </>\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3243, "column": 0}, "map": {"version":3,"sources":["file:///home/faros/stealth-money/packages/web/src/components/features/PaymentForm.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { z } from \"zod\";\nimport { CreditCard, User, Building, Loader2, Shield, AlertCircle, ArrowLeft, CheckCircle, Mail } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\n\n// Validation schemas\nconst cardDetailsSchema = z.object({\n  number: z.string().min(13, 'Card number must be at least 13 digits').max(19, 'Card number cannot exceed 19 digits'),\n  expiryMonth: z.number().min(1, 'Invalid month').max(12, 'Invalid month'),\n  expiryYear: z.number().min(new Date().getFullYear(), 'Card has expired').max(new Date().getFullYear() + 20, 'Invalid year'),\n  cvv: z.string().min(3, 'CVV must be at least 3 digits').max(4, 'CVV cannot exceed 4 digits')\n});\n\nconst userToUserPaymentFormSchema = z.object({\n  cardDetails: cardDetailsSchema\n});\n\n// Types for user-to-user transfers\ninterface CardDetails {\n  number: string;\n  expiryMonth: number;\n  expiryYear: number;\n  cvv: string;\n}\n\ninterface UserProfile {\n  id: string;\n  email: string;\n  username?: string;\n  phone?: string;\n  firstName?: string;\n  lastName?: string;\n  fullName: string;\n  profileImageUrl?: string;\n  isVerified: boolean;\n  supportedCurrencies: string[];\n}\n\ninterface VerifiedPaymentMethod {\n  id: string;\n  type: 'bank_account' | 'mobile_wallet' | 'debit_card';\n  currency: string;\n  bankName?: string;\n  accountType?: string;\n  lastFourDigits?: string;\n  isDefault: boolean;\n  verifiedAt: string;\n  country: string;\n}\n\ninterface TransferCalculationData {\n  sendAmount: number;\n  receiveAmount: number;\n  sendCurrency: string;\n  receiveCurrency: string;\n  exchangeRate: number;\n  fees: number;\n  rateId: string;\n  rateValidUntil: string;\n  calculatorMode: 'send' | 'receive';\n  breakdown: {\n    sendAmountUSD: number;\n    fees: {\n      cardProcessing: number;\n      transfer: number;\n      payout: number;\n      total: number;\n    };\n    netAmountUSD: number;\n    exchangeRate: number;\n    receiveAmount: number;\n  };\n  estimatedArrival: string;\n}\n\n\n// Legacy interface for backward compatibility\ninterface RecipientInfo {\n  name: string;\n  email: string;\n  bankAccount: {\n    iban: string;\n    bic: string;\n    bankName: string;\n    accountHolderName: string;\n    country: 'DE';\n  };\n}\n\ninterface PaymentData {\n  cardDetails: CardDetails;\n  recipientInfo: RecipientInfo;\n}\n\n// Enhanced props for user-to-user transfers\ninterface EnhancedPaymentFormProps {\n  transferData: TransferCalculationData;\n  recipientUser: UserProfile;\n  selectedPaymentMethod: VerifiedPaymentMethod;\n  onSuccess: (transferId: string) => void;\n  onBack: () => void;\n  onError: (error: string) => void;\n  isLoading?: boolean;\n}\n\n// Legacy props for backward compatibility\ninterface PaymentFormProps {\n  sendAmount: number;\n  receiveAmount: number;\n  exchangeRate: number;\n  fees: number;\n  rateId: string;\n  onSubmit: (data: PaymentData) => void;\n  isLoading?: boolean;\n  // Enhanced props for user-to-user transfers\n  transferData?: TransferCalculationData;\n  recipientUser?: UserProfile;\n  selectedPaymentMethod?: VerifiedPaymentMethod;\n  onSuccess?: (transferId: string) => void;\n  onBack?: () => void;\n  onError?: (error: string) => void;\n}\n\nexport function PaymentForm({ \n  sendAmount, \n  receiveAmount, \n  exchangeRate, \n  fees, \n  rateId,\n  onSubmit,\n  isLoading = false,\n  // Enhanced props for user-to-user transfers\n  transferData,\n  recipientUser,\n  selectedPaymentMethod,\n  onSuccess,\n  onBack,\n  onError\n}: PaymentFormProps) {\n  \n  // Detect if this is a user-to-user transfer\n  const isUserToUserTransfer = !!(transferData && recipientUser && selectedPaymentMethod);\n  \n  // Use enhanced data if available, otherwise fall back to legacy props\n  const effectiveTransferData = transferData || {\n    sendAmount,\n    receiveAmount,\n    sendCurrency: 'USD',\n    receiveCurrency: 'EUR',\n    exchangeRate,\n    fees,\n    rateId,\n    rateValidUntil: '',\n    calculatorMode: 'send' as const,\n    breakdown: {\n      sendAmountUSD: sendAmount,\n      fees: {\n        cardProcessing: 0,\n        transfer: 0,\n        payout: 0,\n        total: fees,\n      },\n      netAmountUSD: sendAmount - fees,\n      exchangeRate,\n      receiveAmount,\n    },\n    estimatedArrival: '',\n  };\n  // Form state\n  const [cardDetails, setCardDetails] = useState<CardDetails>({\n    number: '',\n    expiryMonth: 1,\n    expiryYear: new Date().getFullYear(),\n    cvv: ''\n  });\n\n  const [recipientInfo, setRecipientInfo] = useState<RecipientInfo>({\n    name: '',\n    email: '',\n    bankAccount: {\n      iban: '',\n      bic: '',\n      bankName: '',\n      accountHolderName: '',\n      country: 'DE'\n    }\n  });\n\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Format card number with spaces\n  const formatCardNumber = (value: string) => {\n    const cleaned = value.replace(/\\s/g, '').replace(/[^0-9]/gi, '');\n    const matches = cleaned.match(/\\d{4,16}/g);\n    const match = matches && matches[0] || '';\n    const parts = [];\n    for (let i = 0, len = match.length; i < len; i += 4) {\n      parts.push(match.substring(i, i + 4));\n    }\n    if (parts.length) {\n      return parts.join(' ');\n    } else {\n      return cleaned;\n    }\n  };\n\n  // Format IBAN with spaces\n  const formatIBAN = (value: string) => {\n    const cleaned = value.replace(/\\s/g, '').toUpperCase();\n    return cleaned.replace(/(.{4})/g, '$1 ').trim();\n  };\n\n  // Handle card details change\n  const handleCardDetailsChange = (field: keyof CardDetails, value: string | number) => {\n    setCardDetails(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    \n    // Clear validation error for this field\n    if (validationErrors[`cardDetails.${field}`]) {\n      setValidationErrors(prev => {\n        const newErrors = { ...prev };\n        delete newErrors[`cardDetails.${field}`];\n        return newErrors;\n      });\n    }\n  };\n\n  // Handle recipient info change\n  const handleRecipientInfoChange = (field: string, value: string) => {\n    if (field.startsWith('bankAccount.')) {\n      const bankField = field.replace('bankAccount.', '');\n      setRecipientInfo(prev => ({\n        ...prev,\n        bankAccount: {\n          ...prev.bankAccount,\n          [bankField]: value\n        }\n      }));\n    } else {\n      setRecipientInfo(prev => ({\n        ...prev,\n        [field]: value\n      }));\n    }\n    \n    // Clear validation error for this field\n    if (validationErrors[`recipientInfo.${field}`]) {\n      setValidationErrors(prev => {\n        const newErrors = { ...prev };\n        delete newErrors[`recipientInfo.${field}`];\n        return newErrors;\n      });\n    }\n  };\n\n  // Get authentication token (placeholder - would integrate with actual auth)\n  const getAuthToken = async (): Promise<string> => {\n    // This would integrate with Clerk or your auth system\n    // For now, return a placeholder\n    return 'mock-token';\n  };\n\n  // Handle form submission\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    \n    setValidationErrors({});\n    setIsProcessing(true);\n\n    try {\n      if (isUserToUserTransfer) {\n        // User-to-user transfer flow\n        const formData = {\n          cardDetails: {\n            ...cardDetails,\n            number: cardDetails.number.replace(/\\s/g, '') // Remove spaces for validation\n          }\n        };\n\n        userToUserPaymentFormSchema.parse(formData);\n\n        // Create transfer with user-to-user data\n        const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000';\n        const response = await fetch(`${API_URL}/api/transfers/create-user-to-user`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${await getAuthToken()}`,\n          },\n          body: JSON.stringify({\n            sendAmount: effectiveTransferData.sendAmount,\n            sendCurrency: effectiveTransferData.sendCurrency,\n            receiveCurrency: effectiveTransferData.receiveCurrency,\n            rateId: effectiveTransferData.rateId,\n            cardDetails: formData.cardDetails,\n            recipientUserId: recipientUser!.id,\n            recipientPaymentMethodId: selectedPaymentMethod!.id,\n          }),\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({}));\n          throw new Error(errorData.message || 'Failed to create transfer');\n        }\n\n        const result = await response.json();\n        \n        // Call success callback with transfer ID\n        if (onSuccess) {\n          onSuccess(result.transferId);\n        }\n      } else {\n        // Legacy transfer flow\n        const formData = {\n          cardDetails: {\n            ...cardDetails,\n            number: cardDetails.number.replace(/\\s/g, '') // Remove spaces for validation\n          },\n          recipientInfo: {\n            ...recipientInfo,\n            bankAccount: {\n              ...recipientInfo.bankAccount,\n              iban: recipientInfo.bankAccount.iban.replace(/\\s/g, '') // Remove spaces for validation\n            }\n          }\n        };\n\n        // For legacy form, validate both card details and recipient info\n        const legacyPaymentFormSchema = z.object({\n          cardDetails: cardDetailsSchema,\n          recipientInfo: z.object({\n            name: z.string().min(2, 'Name must be at least 2 characters').max(100, 'Name cannot exceed 100 characters'),\n            email: z.string().email('Invalid email address'),\n            bankAccount: z.object({\n              iban: z.string().min(15, 'IBAN must be at least 15 characters').max(34, 'IBAN cannot exceed 34 characters'),\n              bic: z.string().min(8, 'BIC must be at least 8 characters').max(11, 'BIC cannot exceed 11 characters'),\n              bankName: z.string().min(2, 'Bank name must be at least 2 characters').max(100, 'Bank name cannot exceed 100 characters'),\n              accountHolderName: z.string().min(2, 'Account holder name must be at least 2 characters').max(100, 'Account holder name cannot exceed 100 characters'),\n              country: z.literal('DE').refine(() => true, { message: 'Only German bank accounts are supported' })\n            })\n          })\n        });\n\n        legacyPaymentFormSchema.parse(formData);\n\n        // Call onSubmit with validated data\n        onSubmit(formData);\n      }\n    } catch (err) {\n      console.error('Transfer creation error:', err);\n      \n      if (err instanceof z.ZodError) {\n        const errors: Record<string, string> = {};\n        err.issues.forEach((error) => {\n          const path = error.path.join('.');\n          errors[path] = error.message;\n        });\n        setValidationErrors(errors);\n      } else {\n        const errorMessage = err instanceof Error ? err.message : 'Failed to create transfer';\n        if (onError) {\n          onError(errorMessage);\n        }\n      }\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const totalAmount = effectiveTransferData.sendAmount + effectiveTransferData.fees;\n\n  // Render user-to-user transfer UI\n  if (isUserToUserTransfer) {\n    return (\n      <div className=\"w-full max-w-4xl mx-auto space-y-6\">\n        {/* Header with Back Button */}\n        {onBack && (\n          <div className=\"flex items-center justify-between\">\n            <Button\n              variant=\"outline\"\n              onClick={onBack}\n              disabled={isLoading || isProcessing}\n              className=\"flex items-center gap-2\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n              Back\n            </Button>\n            <h1 className=\"text-2xl font-bold\">Complete Payment</h1>\n            <div></div> {/* Spacer for centering */}\n          </div>\n        )}\n\n        {/* Transfer Summary */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Transfer Summary\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Sender and Recipient */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Sender (You) */}\n              <div className=\"space-y-2\">\n                <h3 className=\"font-semibold text-sm text-gray-600 uppercase tracking-wide\">From</h3>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center\">\n                    <User className=\"w-5 h-5 text-blue-600\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium\">You</p>\n                    <p className=\"text-sm text-gray-600\">Sending via card payment</p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Recipient */}\n              <div className=\"space-y-2\">\n                <h3 className=\"font-semibold text-sm text-gray-600 uppercase tracking-wide\">To</h3>\n                <div className=\"flex items-center space-x-3\">\n                  {recipientUser!.profileImageUrl ? (\n                    <img\n                      src={recipientUser!.profileImageUrl}\n                      alt={recipientUser!.fullName}\n                      className=\"w-10 h-10 rounded-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center\">\n                      <User className=\"w-5 h-5 text-gray-500\" />\n                    </div>\n                  )}\n                  <div>\n                    <div className=\"flex items-center space-x-2\">\n                      <p className=\"font-medium\">{recipientUser!.fullName}</p>\n                      {recipientUser!.isVerified && (\n                        <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                      )}\n                    </div>\n                    <div className=\"flex items-center space-x-1 text-sm text-gray-600\">\n                      <Mail className=\"w-3 h-3\" />\n                      <span>{recipientUser!.email}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Amount Details */}\n            <div className=\"border-t pt-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Send Amount */}\n                <div className=\"space-y-2\">\n                  <h3 className=\"font-semibold text-sm text-gray-600 uppercase tracking-wide\">You Send</h3>\n                  <div className=\"text-2xl font-bold text-gray-900\">\n                    {effectiveTransferData.sendAmount.toFixed(2)} {effectiveTransferData.sendCurrency}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">\n                    + {effectiveTransferData.fees.toFixed(2)} {effectiveTransferData.sendCurrency} fees\n                  </div>\n                  <div className=\"text-lg font-semibold border-t pt-2\">\n                    Total: {totalAmount.toFixed(2)} {effectiveTransferData.sendCurrency}\n                  </div>\n                </div>\n\n                {/* Receive Amount */}\n                <div className=\"space-y-2\">\n                  <h3 className=\"font-semibold text-sm text-gray-600 uppercase tracking-wide\">They Receive</h3>\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {effectiveTransferData.receiveAmount.toFixed(2)} {effectiveTransferData.receiveCurrency}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">\n                    Exchange rate: 1 {effectiveTransferData.sendCurrency} = {effectiveTransferData.exchangeRate.toFixed(4)} {effectiveTransferData.receiveCurrency}\n                  </div>\n                  {effectiveTransferData.estimatedArrival && (\n                    <div className=\"text-sm text-gray-600\">\n                      Estimated arrival: {effectiveTransferData.estimatedArrival}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recipient Payment Method */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Building className=\"h-5 w-5\" />\n              Recipient's Bank Account\n            </CardTitle>\n            <p className=\"text-sm text-gray-600\">\n              {recipientUser!.fullName} will receive the money in their verified account\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center space-x-3 p-4 bg-gray-50 rounded-lg\">\n              <CreditCard className=\"w-5 h-5 text-gray-500\" />\n              <div className=\"flex-1\">\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"font-medium\">\n                    {selectedPaymentMethod!.bankName || `${selectedPaymentMethod!.type.replace('_', ' ')}`}\n                  </span>\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    {selectedPaymentMethod!.currency}\n                  </Badge>\n                  {selectedPaymentMethod!.isDefault && (\n                    <Badge variant=\"outline\" className=\"text-xs\">Default</Badge>\n                  )}\n                </div>\n                <div className=\"text-sm text-gray-600\">\n                  {selectedPaymentMethod!.accountType} • {selectedPaymentMethod!.country}\n                  {selectedPaymentMethod!.lastFourDigits && (\n                    <span> • ****{selectedPaymentMethod!.lastFourDigits}</span>\n                  )}\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  Verified {new Date(selectedPaymentMethod!.verifiedAt).toLocaleDateString()}\n                </div>\n              </div>\n              <CheckCircle className=\"w-5 h-5 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Payment Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CreditCard className=\"h-5 w-5\" />\n              Your Payment Method\n            </CardTitle>\n            <p className=\"text-sm text-gray-600\">\n              Enter your card details to complete the transfer\n            </p>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {/* Card Details Section */}\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"card-number\">Card Number</Label>\n                  <Input\n                    id=\"card-number\"\n                    type=\"text\"\n                    placeholder=\"1234 5678 9012 3456\"\n                    value={formatCardNumber(cardDetails.number)}\n                    onChange={(e) => handleCardDetailsChange('number', e.target.value.replace(/\\s/g, ''))}\n                    className={validationErrors['cardDetails.number'] ? 'border-red-500' : ''}\n                    maxLength={19}\n                  />\n                  {validationErrors['cardDetails.number'] && (\n                    <p className=\"text-sm text-red-500 mt-1 flex items-center gap-1\">\n                      <AlertCircle className=\"h-3 w-3\" />\n                      {validationErrors['cardDetails.number']}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"expiry-month\">Month</Label>\n                    <Input\n                      id=\"expiry-month\"\n                      type=\"number\"\n                      placeholder=\"MM\"\n                      min=\"1\"\n                      max=\"12\"\n                      value={cardDetails.expiryMonth}\n                      onChange={(e) => handleCardDetailsChange('expiryMonth', parseInt(e.target.value) || 1)}\n                      className={validationErrors['cardDetails.expiryMonth'] ? 'border-red-500' : ''}\n                    />\n                    {validationErrors['cardDetails.expiryMonth'] && (\n                      <p className=\"text-sm text-red-500 mt-1\">{validationErrors['cardDetails.expiryMonth']}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"expiry-year\">Year</Label>\n                    <Input\n                      id=\"expiry-year\"\n                      type=\"number\"\n                      placeholder=\"YYYY\"\n                      min={new Date().getFullYear()}\n                      max={new Date().getFullYear() + 20}\n                      value={cardDetails.expiryYear}\n                      onChange={(e) => handleCardDetailsChange('expiryYear', parseInt(e.target.value) || new Date().getFullYear())}\n                      className={validationErrors['cardDetails.expiryYear'] ? 'border-red-500' : ''}\n                    />\n                    {validationErrors['cardDetails.expiryYear'] && (\n                      <p className=\"text-sm text-red-500 mt-1\">{validationErrors['cardDetails.expiryYear']}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"cvv\">CVV</Label>\n                    <Input\n                      id=\"cvv\"\n                      type=\"text\"\n                      placeholder=\"123\"\n                      maxLength={4}\n                      value={cardDetails.cvv}\n                      onChange={(e) => handleCardDetailsChange('cvv', e.target.value.replace(/[^0-9]/g, ''))}\n                      className={validationErrors['cardDetails.cvv'] ? 'border-red-500' : ''}\n                    />\n                    {validationErrors['cardDetails.cvv'] && (\n                      <p className=\"text-sm text-red-500 mt-1\">{validationErrors['cardDetails.cvv']}</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Submit Button */}\n              <Button \n                type=\"submit\"\n                disabled={isLoading || isProcessing}\n                className=\"w-full\"\n                size=\"lg\"\n              >\n                {isLoading || isProcessing ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Processing Transfer...\n                  </>\n                ) : (\n                  `Send ${totalAmount.toFixed(2)} ${effectiveTransferData.sendCurrency} to ${recipientUser!.fullName}`\n                )}\n              </Button>\n\n              {/* Security Notice */}\n              <div className=\"flex items-center justify-center space-x-2 text-xs text-muted-foreground\">\n                <Shield className=\"w-4 h-4\" />\n                <span>Secured by Circle • PCI DSS Compliant</span>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Legacy transfer UI\n  return (\n    <Card className=\"w-full max-w-2xl mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <CreditCard className=\"h-5 w-5\" />\n          Complete Your Transfer\n        </CardTitle>\n        <div className=\"text-sm text-muted-foreground\">\n          <div className=\"flex justify-between\">\n            <span>You send:</span>\n            <span className=\"font-medium\">${effectiveTransferData.sendAmount.toFixed(2)} {effectiveTransferData.sendCurrency}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Fees:</span>\n            <span className=\"font-medium\">${effectiveTransferData.fees.toFixed(2)} {effectiveTransferData.sendCurrency}</span>\n          </div>\n          <div className=\"flex justify-between border-t pt-1 mt-1\">\n            <span>Total to pay:</span>\n            <span className=\"font-bold\">${totalAmount.toFixed(2)} {effectiveTransferData.sendCurrency}</span>\n          </div>\n          <div className=\"flex justify-between text-green-600\">\n            <span>Recipient gets:</span>\n            <span className=\"font-bold\">€{effectiveTransferData.receiveAmount.toFixed(2)} {effectiveTransferData.receiveCurrency}</span>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-8\">\n          {/* Card Details Section */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <CreditCard className=\"h-4 w-4\" />\n              <h3 className=\"font-semibold\">Payment Details</h3>\n            </div>\n            \n            <div className=\"grid grid-cols-1 gap-4\">\n              <div>\n                <Label htmlFor=\"card-number\">Card Number</Label>\n                <Input\n                  id=\"card-number\"\n                  type=\"text\"\n                  placeholder=\"1234 5678 9012 3456\"\n                  value={formatCardNumber(cardDetails.number)}\n                  onChange={(e) => handleCardDetailsChange('number', e.target.value.replace(/\\s/g, ''))}\n                  className={validationErrors['cardDetails.number'] ? 'border-red-500' : ''}\n                  maxLength={19}\n                />\n                {validationErrors['cardDetails.number'] && (\n                  <p className=\"text-sm text-red-500 mt-1 flex items-center gap-1\">\n                    <AlertCircle className=\"h-3 w-3\" />\n                    {validationErrors['cardDetails.number']}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"expiry-month\">Month</Label>\n                  <Input\n                    id=\"expiry-month\"\n                    type=\"number\"\n                    placeholder=\"MM\"\n                    min=\"1\"\n                    max=\"12\"\n                    value={cardDetails.expiryMonth}\n                    onChange={(e) => handleCardDetailsChange('expiryMonth', parseInt(e.target.value) || 1)}\n                    className={validationErrors['cardDetails.expiryMonth'] ? 'border-red-500' : ''}\n                  />\n                  {validationErrors['cardDetails.expiryMonth'] && (\n                    <p className=\"text-sm text-red-500 mt-1\">{validationErrors['cardDetails.expiryMonth']}</p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"expiry-year\">Year</Label>\n                  <Input\n                    id=\"expiry-year\"\n                    type=\"number\"\n                    placeholder=\"YYYY\"\n                    min={new Date().getFullYear()}\n                    max={new Date().getFullYear() + 20}\n                    value={cardDetails.expiryYear}\n                    onChange={(e) => handleCardDetailsChange('expiryYear', parseInt(e.target.value) || new Date().getFullYear())}\n                    className={validationErrors['cardDetails.expiryYear'] ? 'border-red-500' : ''}\n                  />\n                  {validationErrors['cardDetails.expiryYear'] && (\n                    <p className=\"text-sm text-red-500 mt-1\">{validationErrors['cardDetails.expiryYear']}</p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"cvv\">CVV</Label>\n                  <Input\n                    id=\"cvv\"\n                    type=\"text\"\n                    placeholder=\"123\"\n                    maxLength={4}\n                    value={cardDetails.cvv}\n                    onChange={(e) => handleCardDetailsChange('cvv', e.target.value.replace(/[^0-9]/g, ''))}\n                    className={validationErrors['cardDetails.cvv'] ? 'border-red-500' : ''}\n                  />\n                  {validationErrors['cardDetails.cvv'] && (\n                    <p className=\"text-sm text-red-500 mt-1\">{validationErrors['cardDetails.cvv']}</p>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Recipient Information Section */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <User className=\"h-4 w-4\" />\n              <h3 className=\"font-semibold\">Recipient Information</h3>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"recipient-name\">Full Name</Label>\n                <Input\n                  id=\"recipient-name\"\n                  type=\"text\"\n                  placeholder=\"John Doe\"\n                  value={recipientInfo.name}\n                  onChange={(e) => handleRecipientInfoChange('name', e.target.value)}\n                  className={validationErrors['recipientInfo.name'] ? 'border-red-500' : ''}\n                />\n                {validationErrors['recipientInfo.name'] && (\n                  <p className=\"text-sm text-red-500 mt-1\">{validationErrors['recipientInfo.name']}</p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"recipient-email\">Email Address</Label>\n                <Input\n                  id=\"recipient-email\"\n                  type=\"email\"\n                  placeholder=\"john@example.com\"\n                  value={recipientInfo.email}\n                  onChange={(e) => handleRecipientInfoChange('email', e.target.value)}\n                  className={validationErrors['recipientInfo.email'] ? 'border-red-500' : ''}\n                />\n                {validationErrors['recipientInfo.email'] && (\n                  <p className=\"text-sm text-red-500 mt-1\">{validationErrors['recipientInfo.email']}</p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Bank Account Section */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <Building className=\"h-4 w-4\" />\n              <h3 className=\"font-semibold\">Bank Account Details (Germany)</h3>\n            </div>\n\n            <div className=\"grid grid-cols-1 gap-4\">\n              <div>\n                <Label htmlFor=\"iban\">IBAN</Label>\n                <Input\n                  id=\"iban\"\n                  type=\"text\"\n                  placeholder=\"DE89 3704 0044 0532 0130 00\"\n                  value={formatIBAN(recipientInfo.bankAccount.iban)}\n                  onChange={(e) => handleRecipientInfoChange('bankAccount.iban', e.target.value.replace(/\\s/g, ''))}\n                  className={validationErrors['recipientInfo.bankAccount.iban'] ? 'border-red-500' : ''}\n                />\n                {validationErrors['recipientInfo.bankAccount.iban'] && (\n                  <p className=\"text-sm text-red-500 mt-1\">{validationErrors['recipientInfo.bankAccount.iban']}</p>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"bic\">BIC/SWIFT Code</Label>\n                  <Input\n                    id=\"bic\"\n                    type=\"text\"\n                    placeholder=\"COBADEFFXXX\"\n                    value={recipientInfo.bankAccount.bic}\n                    onChange={(e) => handleRecipientInfoChange('bankAccount.bic', e.target.value.toUpperCase())}\n                    className={validationErrors['recipientInfo.bankAccount.bic'] ? 'border-red-500' : ''}\n                  />\n                  {validationErrors['recipientInfo.bankAccount.bic'] && (\n                    <p className=\"text-sm text-red-500 mt-1\">{validationErrors['recipientInfo.bankAccount.bic']}</p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"bank-name\">Bank Name</Label>\n                  <Input\n                    id=\"bank-name\"\n                    type=\"text\"\n                    placeholder=\"Deutsche Bank\"\n                    value={recipientInfo.bankAccount.bankName}\n                    onChange={(e) => handleRecipientInfoChange('bankAccount.bankName', e.target.value)}\n                    className={validationErrors['recipientInfo.bankAccount.bankName'] ? 'border-red-500' : ''}\n                  />\n                  {validationErrors['recipientInfo.bankAccount.bankName'] && (\n                    <p className=\"text-sm text-red-500 mt-1\">{validationErrors['recipientInfo.bankAccount.bankName']}</p>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"account-holder\">Account Holder Name</Label>\n                <Input\n                  id=\"account-holder\"\n                  type=\"text\"\n                  placeholder=\"John Doe\"\n                  value={recipientInfo.bankAccount.accountHolderName}\n                  onChange={(e) => handleRecipientInfoChange('bankAccount.accountHolderName', e.target.value)}\n                  className={validationErrors['recipientInfo.bankAccount.accountHolderName'] ? 'border-red-500' : ''}\n                />\n                {validationErrors['recipientInfo.bankAccount.accountHolderName'] && (\n                  <p className=\"text-sm text-red-500 mt-1\">{validationErrors['recipientInfo.bankAccount.accountHolderName']}</p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Submit Button */}\n          <Button \n            type=\"submit\"\n            disabled={isLoading || isProcessing}\n            className=\"w-full\"\n            size=\"lg\"\n          >\n            {isLoading || isProcessing ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Processing Transfer...\n              </>\n            ) : (\n              `Send ${effectiveTransferData.sendAmount.toFixed(2)} USD`\n            )}\n          </Button>\n\n          {/* Security Notice */}\n          <div className=\"flex items-center justify-center space-x-2 text-xs text-muted-foreground\">\n            <Shield className=\"w-4 h-4\" />\n            <span>Secured by Circle • PCI DSS Compliant</span>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Enhanced PaymentForm for user-to-user transfers\nexport function EnhancedPaymentForm({\n  transferData,\n  recipientUser,\n  selectedPaymentMethod,\n  onSuccess,\n  onBack,\n  onError,\n  isLoading = false\n}: EnhancedPaymentFormProps) {\n  // Form state\n  const [cardDetails, setCardDetails] = useState<CardDetails>({\n    number: '',\n    expiryMonth: 1,\n    expiryYear: new Date().getFullYear(),\n    cvv: ''\n  });\n\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Format card number with spaces\n  const formatCardNumber = (value: string) => {\n    const cleaned = value.replace(/\\s/g, '').replace(/[^0-9]/gi, '');\n    const matches = cleaned.match(/\\d{4,16}/g);\n    const match = matches && matches[0] || '';\n    const parts = [];\n    for (let i = 0, len = match.length; i < len; i += 4) {\n      parts.push(match.substring(i, i + 4));\n    }\n    if (parts.length) {\n      return parts.join(' ');\n    } else {\n      return cleaned;\n    }\n  };\n\n  // Handle card details change\n  const handleCardDetailsChange = (field: keyof CardDetails, value: string | number) => {\n    setCardDetails(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    \n    // Clear validation error for this field\n    if (validationErrors[`cardDetails.${field}`]) {\n      setValidationErrors(prev => {\n        const newErrors = { ...prev };\n        delete newErrors[`cardDetails.${field}`];\n        return newErrors;\n      });\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    \n    setValidationErrors({});\n    setIsProcessing(true);\n\n    try {\n      // Validate form data\n      const formData = {\n        cardDetails: {\n          ...cardDetails,\n          number: cardDetails.number.replace(/\\s/g, '') // Remove spaces for validation\n        }\n      };\n\n      userToUserPaymentFormSchema.parse(formData);\n\n      // Create transfer with user-to-user data\n      const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000';\n      const response = await fetch(`${API_URL}/api/transfers/create-user-to-user`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${await getAuthToken()}`,\n        },\n        body: JSON.stringify({\n          sendAmount: transferData.sendAmount,\n          sendCurrency: transferData.sendCurrency,\n          receiveCurrency: transferData.receiveCurrency,\n          rateId: transferData.rateId,\n          cardDetails: formData.cardDetails,\n          recipientUserId: recipientUser.id,\n          recipientPaymentMethodId: selectedPaymentMethod.id,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || 'Failed to create transfer');\n      }\n\n      const result = await response.json();\n      \n      // Call success callback with transfer ID\n      onSuccess(result.transferId);\n      \n    } catch (err) {\n      console.error('Transfer creation error:', err);\n      \n      if (err instanceof z.ZodError) {\n        const errors: Record<string, string> = {};\n        err.issues.forEach((error) => {\n          const path = error.path.join('.');\n          errors[path] = error.message;\n        });\n        setValidationErrors(errors);\n      } else {\n        const errorMessage = err instanceof Error ? err.message : 'Failed to create transfer';\n        onError(errorMessage);\n      }\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // Get authentication token (placeholder - would integrate with actual auth)\n  const getAuthToken = async (): Promise<string> => {\n    // This would integrate with Clerk or your auth system\n    // For now, return a placeholder\n    return 'mock-token';\n  };\n\n\n  const totalAmount = transferData.sendAmount + transferData.fees;\n\n  return (\n    <div className=\"w-full max-w-4xl mx-auto space-y-6\">\n      {/* Header with Back Button */}\n      <div className=\"flex items-center justify-between\">\n        <Button\n          variant=\"outline\"\n          onClick={onBack}\n          disabled={isLoading || isProcessing}\n          className=\"flex items-center gap-2\"\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n          Back\n        </Button>\n        <h1 className=\"text-2xl font-bold\">Complete Payment</h1>\n        <div></div> {/* Spacer for centering */}\n      </div>\n\n      {/* Transfer Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Transfer Summary\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Sender and Recipient */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Sender (You) */}\n            <div className=\"space-y-2\">\n              <h3 className=\"font-semibold text-sm text-gray-600 uppercase tracking-wide\">From</h3>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center\">\n                  <User className=\"w-5 h-5 text-blue-600\" />\n                </div>\n                <div>\n                  <p className=\"font-medium\">You</p>\n                  <p className=\"text-sm text-gray-600\">Sending via card payment</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Recipient */}\n            <div className=\"space-y-2\">\n              <h3 className=\"font-semibold text-sm text-gray-600 uppercase tracking-wide\">To</h3>\n              <div className=\"flex items-center space-x-3\">\n                {recipientUser.profileImageUrl ? (\n                  <img\n                    src={recipientUser.profileImageUrl}\n                    alt={recipientUser.fullName}\n                    className=\"w-10 h-10 rounded-full object-cover\"\n                  />\n                ) : (\n                  <div className=\"w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center\">\n                    <User className=\"w-5 h-5 text-gray-500\" />\n                  </div>\n                )}\n                <div>\n                  <div className=\"flex items-center space-x-2\">\n                    <p className=\"font-medium\">{recipientUser.fullName}</p>\n                    {recipientUser.isVerified && (\n                      <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                    )}\n                  </div>\n                  <div className=\"flex items-center space-x-1 text-sm text-gray-600\">\n                    <Mail className=\"w-3 h-3\" />\n                    <span>{recipientUser.email}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Amount Details */}\n          <div className=\"border-t pt-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Send Amount */}\n              <div className=\"space-y-2\">\n                <h3 className=\"font-semibold text-sm text-gray-600 uppercase tracking-wide\">You Send</h3>\n                <div className=\"text-2xl font-bold text-gray-900\">\n                  {transferData.sendAmount.toFixed(2)} {transferData.sendCurrency}\n                </div>\n                <div className=\"text-sm text-gray-600\">\n                  + {transferData.fees.toFixed(2)} {transferData.sendCurrency} fees\n                </div>\n                <div className=\"text-lg font-semibold border-t pt-2\">\n                  Total: {totalAmount.toFixed(2)} {transferData.sendCurrency}\n                </div>\n              </div>\n\n              {/* Receive Amount */}\n              <div className=\"space-y-2\">\n                <h3 className=\"font-semibold text-sm text-gray-600 uppercase tracking-wide\">They Receive</h3>\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {transferData.receiveAmount.toFixed(2)} {transferData.receiveCurrency}\n                </div>\n                <div className=\"text-sm text-gray-600\">\n                  Exchange rate: 1 {transferData.sendCurrency} = {transferData.exchangeRate.toFixed(4)} {transferData.receiveCurrency}\n                </div>\n                {transferData.estimatedArrival && (\n                  <div className=\"text-sm text-gray-600\">\n                    Estimated arrival: {transferData.estimatedArrival}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recipient Payment Method */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Building className=\"h-5 w-5\" />\n            Recipient's Bank Account\n          </CardTitle>\n          <p className=\"text-sm text-gray-600\">\n            {recipientUser.fullName} will receive the money in their verified account\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center space-x-3 p-4 bg-gray-50 rounded-lg\">\n            <CreditCard className=\"w-5 h-5 text-gray-500\" />\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"font-medium\">\n                  {selectedPaymentMethod.bankName || `${selectedPaymentMethod.type.replace('_', ' ')}`}\n                </span>\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {selectedPaymentMethod.currency}\n                </Badge>\n                {selectedPaymentMethod.isDefault && (\n                  <Badge variant=\"outline\" className=\"text-xs\">Default</Badge>\n                )}\n              </div>\n              <div className=\"text-sm text-gray-600\">\n                {selectedPaymentMethod.accountType} • {selectedPaymentMethod.country}\n                {selectedPaymentMethod.lastFourDigits && (\n                  <span> • ****{selectedPaymentMethod.lastFourDigits}</span>\n                )}\n              </div>\n              <div className=\"text-xs text-gray-500\">\n                Verified {new Date(selectedPaymentMethod.verifiedAt).toLocaleDateString()}\n              </div>\n            </div>\n            <CheckCircle className=\"w-5 h-5 text-green-500\" />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Payment Form */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <CreditCard className=\"h-5 w-5\" />\n            Your Payment Method\n          </CardTitle>\n          <p className=\"text-sm text-gray-600\">\n            Enter your card details to complete the transfer\n          </p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Card Details Section */}\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"card-number\">Card Number</Label>\n                <Input\n                  id=\"card-number\"\n                  type=\"text\"\n                  placeholder=\"1234 5678 9012 3456\"\n                  value={formatCardNumber(cardDetails.number)}\n                  onChange={(e) => handleCardDetailsChange('number', e.target.value.replace(/\\s/g, ''))}\n                  className={validationErrors['cardDetails.number'] ? 'border-red-500' : ''}\n                  maxLength={19}\n                />\n                {validationErrors['cardDetails.number'] && (\n                  <p className=\"text-sm text-red-500 mt-1 flex items-center gap-1\">\n                    <AlertCircle className=\"h-3 w-3\" />\n                    {validationErrors['cardDetails.number']}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"expiry-month\">Month</Label>\n                  <Input\n                    id=\"expiry-month\"\n                    type=\"number\"\n                    placeholder=\"MM\"\n                    min=\"1\"\n                    max=\"12\"\n                    value={cardDetails.expiryMonth}\n                    onChange={(e) => handleCardDetailsChange('expiryMonth', parseInt(e.target.value) || 1)}\n                    className={validationErrors['cardDetails.expiryMonth'] ? 'border-red-500' : ''}\n                  />\n                  {validationErrors['cardDetails.expiryMonth'] && (\n                    <p className=\"text-sm text-red-500 mt-1\">{validationErrors['cardDetails.expiryMonth']}</p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"expiry-year\">Year</Label>\n                  <Input\n                    id=\"expiry-year\"\n                    type=\"number\"\n                    placeholder=\"YYYY\"\n                    min={new Date().getFullYear()}\n                    max={new Date().getFullYear() + 20}\n                    value={cardDetails.expiryYear}\n                    onChange={(e) => handleCardDetailsChange('expiryYear', parseInt(e.target.value) || new Date().getFullYear())}\n                    className={validationErrors['cardDetails.expiryYear'] ? 'border-red-500' : ''}\n                  />\n                  {validationErrors['cardDetails.expiryYear'] && (\n                    <p className=\"text-sm text-red-500 mt-1\">{validationErrors['cardDetails.expiryYear']}</p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"cvv\">CVV</Label>\n                  <Input\n                    id=\"cvv\"\n                    type=\"text\"\n                    placeholder=\"123\"\n                    maxLength={4}\n                    value={cardDetails.cvv}\n                    onChange={(e) => handleCardDetailsChange('cvv', e.target.value.replace(/[^0-9]/g, ''))}\n                    className={validationErrors['cardDetails.cvv'] ? 'border-red-500' : ''}\n                  />\n                  {validationErrors['cardDetails.cvv'] && (\n                    <p className=\"text-sm text-red-500 mt-1\">{validationErrors['cardDetails.cvv']}</p>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Submit Button */}\n            <Button \n              type=\"submit\"\n              disabled={isLoading || isProcessing}\n              className=\"w-full\"\n              size=\"lg\"\n            >\n              {isLoading || isProcessing ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Processing Transfer...\n                </>\n              ) : (\n                `Send ${totalAmount.toFixed(2)} ${transferData.sendCurrency} to ${recipientUser.fullName}`\n              )}\n            </Button>\n\n            {/* Security Notice */}\n            <div className=\"flex items-center justify-center space-x-2 text-xs text-muted-foreground\">\n              <Shield className=\"w-4 h-4\" />\n              <span>Secured by Circle • PCI DSS Compliant</span>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6020, "column": 0}, "map": {"version":3,"sources":["file:///home/faros/stealth-money/packages/web/src/components/features/TransferStatus.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { CheckCircle, Clock, AlertCircle, ArrowRight, RefreshCw } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\n// Types based on design document\nexport enum TransferStatusEnum {\n  INITIATED = 'initiated',\n  PAYMENT_PROCESSING = 'payment_processing',\n  TRANSFERRING = 'transferring',\n  PAYING_OUT = 'paying_out',\n  COMPLETED = 'completed',\n  FAILED = 'failed'\n}\n\nexport interface TransferEvent {\n  id: string;\n  transferId: string;\n  type: 'payment_created' | 'payment_confirmed' | 'transfer_initiated' | 'payout_created' | 'payout_completed';\n  status: 'success' | 'pending' | 'failed';\n  message: string;\n  timestamp: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface TransferStatusData {\n  transferId: string;\n  status: TransferStatusEnum;\n  timeline: TransferEvent[];\n  sendAmount: number;\n  receiveAmount: number;\n  exchangeRate: number;\n  fees: number;\n  estimatedCompletion?: string;\n  completedAt?: string;\n  lastUpdated: string;\n}\n\ninterface TransferStatusProps {\n  transferId: string;\n  onRefresh?: () => void;\n  autoRefresh?: boolean;\n  refreshInterval?: number;\n}\n\nexport function TransferStatus({ \n  transferId, \n  onRefresh,\n  autoRefresh = true,\n  refreshInterval = 5000 \n}: TransferStatusProps) {\n  const [transferData, setTransferData] = useState<TransferStatusData | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastRefresh, setLastRefresh] = useState<Date>(new Date());\n  const [isRealTimeConnected, setIsRealTimeConnected] = useState(false);\n\n  // Fetch transfer status\n  const fetchTransferStatus = async (showLoading = true) => {\n    try {\n      if (showLoading) setIsLoading(true);\n      setError(null);\n      const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000';\n      const response = await fetch(`${API_URL}/api/transfers/${transferId}/status`);\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || 'Failed to fetch transfer status');\n      }\n\n      const data: TransferStatusData = await response.json();\n      setTransferData(data);\n      setLastRefresh(new Date());\n      setIsRealTimeConnected(true);\n    } catch (err) {\n      console.error('Transfer status fetch error:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch transfer status');\n      setIsRealTimeConnected(false);\n    } finally {\n      if (showLoading) setIsLoading(false);\n    }\n  };\n\n  // Handle manual refresh\n  const handleRefresh = () => {\n    fetchTransferStatus(true);\n    if (onRefresh) {\n      onRefresh();\n    }\n  };\n\n  // Initial fetch and auto-refresh setup with improved real-time behavior\n  useEffect(() => {\n    fetchTransferStatus(true);\n  }, [transferId]);\n\n  // Separate effect for auto-refresh to avoid infinite loops\n  useEffect(() => {\n    if (!autoRefresh || !transferData) return;\n    \n    const shouldAutoRefresh = \n      transferData.status !== TransferStatusEnum.COMPLETED && \n      transferData.status !== TransferStatusEnum.FAILED;\n\n    if (shouldAutoRefresh) {\n      const interval = setInterval(() => {\n        fetchTransferStatus(false); // Don't show loading spinner for background updates\n      }, refreshInterval);\n      return () => clearInterval(interval);\n    }\n  }, [autoRefresh, refreshInterval, transferData?.status]);\n\n  // Format currency display\n  const formatCurrency = (amount: number, currency: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(amount);\n  };\n\n  // Format timestamp\n  const formatTimestamp = (timestamp: string) => {\n    return new Date(timestamp).toLocaleString();\n  };\n\n  // Get status color and icon\n  const getStatusDisplay = (status: TransferStatusEnum) => {\n    switch (status) {\n      case TransferStatusEnum.INITIATED:\n        return { color: 'text-blue-600', bgColor: 'bg-blue-50', icon: Clock, label: 'Initiated' };\n      case TransferStatusEnum.PAYMENT_PROCESSING:\n        return { color: 'text-yellow-600', bgColor: 'bg-yellow-50', icon: RefreshCw, label: 'Processing Payment' };\n      case TransferStatusEnum.TRANSFERRING:\n        return { color: 'text-blue-600', bgColor: 'bg-blue-50', icon: ArrowRight, label: 'Transferring' };\n      case TransferStatusEnum.PAYING_OUT:\n        return { color: 'text-purple-600', bgColor: 'bg-purple-50', icon: RefreshCw, label: 'Paying Out' };\n      case TransferStatusEnum.COMPLETED:\n        return { color: 'text-green-600', bgColor: 'bg-green-50', icon: CheckCircle, label: 'Completed' };\n      case TransferStatusEnum.FAILED:\n        return { color: 'text-red-600', bgColor: 'bg-red-50', icon: AlertCircle, label: 'Failed' };\n      default:\n        return { color: 'text-gray-600', bgColor: 'bg-gray-50', icon: Clock, label: 'Unknown' };\n    }\n  };\n\n  // Get event status display\n  const getEventStatusDisplay = (status: 'success' | 'pending' | 'failed') => {\n    switch (status) {\n      case 'success':\n        return { color: 'text-green-600', icon: CheckCircle };\n      case 'pending':\n        return { color: 'text-yellow-600', icon: Clock };\n      case 'failed':\n        return { color: 'text-red-600', icon: AlertCircle };\n      default:\n        return { color: 'text-gray-600', icon: Clock };\n    }\n  };\n\n  // Calculate progress percentage\n  const getProgressPercentage = (status: TransferStatusEnum) => {\n    switch (status) {\n      case TransferStatusEnum.INITIATED:\n        return 20;\n      case TransferStatusEnum.PAYMENT_PROCESSING:\n        return 40;\n      case TransferStatusEnum.TRANSFERRING:\n        return 60;\n      case TransferStatusEnum.PAYING_OUT:\n        return 80;\n      case TransferStatusEnum.COMPLETED:\n        return 100;\n      case TransferStatusEnum.FAILED:\n        return 0;\n      default:\n        return 0;\n    }\n  };\n\n  if (isLoading && !transferData) {\n    return (\n      <Card className=\"w-full max-w-2xl mx-auto\">\n        <CardContent className=\"flex items-center justify-center py-8\">\n          <RefreshCw className=\"h-6 w-6 animate-spin text-muted-foreground mr-2\" />\n          <span className=\"text-muted-foreground\">Loading transfer status...</span>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error && !transferData) {\n    return (\n      <Card className=\"w-full max-w-2xl mx-auto\">\n        <CardContent className=\"py-8\">\n          <div className=\"text-center\">\n            <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-red-700 mb-2\">Error Loading Transfer</h3>\n            <p className=\"text-red-600 mb-4\">{error}</p>\n            <Button onClick={handleRefresh} variant=\"outline\">\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              Try Again\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!transferData) {\n    return (\n      <Card className=\"w-full max-w-2xl mx-auto\">\n        <CardContent className=\"py-8\">\n          <div className=\"text-center\">\n            <AlertCircle className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">Transfer Not Found</h3>\n            <p className=\"text-gray-600\">No transfer data available for ID: {transferId}</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const statusDisplay = getStatusDisplay(transferData.status);\n  const StatusIcon = statusDisplay.icon;\n  const progressPercentage = getProgressPercentage(transferData.status);\n\n  return (\n    <Card className=\"w-full max-w-2xl mx-auto shadow-sm\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3\">\n          <CardTitle className=\"flex items-center gap-2 text-lg\">\n            <StatusIcon className={`h-5 w-5 ${statusDisplay.color}`} />\n            <span className=\"hidden sm:inline\">Transfer Status</span>\n            <span className=\"sm:hidden\">Status</span>\n          </CardTitle>\n          <Button \n            onClick={handleRefresh} \n            variant=\"outline\" \n            size=\"sm\"\n            disabled={isLoading}\n            className=\"self-start sm:self-auto\"\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />\n            <span className=\"hidden sm:inline\">Refresh</span>\n            <span className=\"sm:hidden\">Update</span>\n          </Button>\n        </div>\n        <div className=\"text-sm text-muted-foreground break-all sm:break-normal\">\n          ID: {transferData.transferId}\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Status Overview */}\n        <div className={`rounded-lg p-4 ${statusDisplay.bgColor}`}>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <StatusIcon className={`h-6 w-6 ${statusDisplay.color}`} />\n              <div>\n                <h3 className={`font-semibold ${statusDisplay.color}`}>\n                  {statusDisplay.label}\n                </h3>\n                {transferData.estimatedCompletion && transferData.status !== TransferStatusEnum.COMPLETED && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    Estimated completion: {formatTimestamp(transferData.estimatedCompletion)}\n                  </p>\n                )}\n                {transferData.completedAt && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    Completed: {formatTimestamp(transferData.completedAt)}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-sm text-muted-foreground\">\n            <span>Progress</span>\n            <span>{progressPercentage}%</span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div \n              className={`h-2 rounded-full transition-all duration-500 ${\n                transferData.status === TransferStatusEnum.FAILED ? 'bg-red-500' : 'bg-blue-500'\n              }`}\n              style={{ width: `${progressPercentage}%` }}\n            />\n          </div>\n        </div>\n\n        {/* Transfer Details */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">You sent</p>\n            <p className=\"font-semibold\">{formatCurrency(transferData.sendAmount, 'USD')}</p>\n          </div>\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Recipient gets</p>\n            <p className=\"font-semibold text-green-600\">{formatCurrency(transferData.receiveAmount, 'EUR')}</p>\n          </div>\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Exchange rate</p>\n            <p className=\"font-semibold\">1 USD = {transferData.exchangeRate.toFixed(4)} EUR</p>\n          </div>\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Fees</p>\n            <p className=\"font-semibold\">{formatCurrency(transferData.fees, 'USD')}</p>\n          </div>\n        </div>\n\n        {/* Enhanced Timeline with better visualization */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"font-semibold\">Timeline</h3>\n            {isRealTimeConnected && (\n              <div className=\"flex items-center gap-1 text-xs text-green-600\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                Live updates\n              </div>\n            )}\n          </div>\n          <div className=\"relative\">\n            {transferData.timeline.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Clock className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                <p>No timeline events yet</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {transferData.timeline.map((event, index) => {\n                  const eventStatusDisplay = getEventStatusDisplay(event.status);\n                  const EventIcon = eventStatusDisplay.icon;\n                  const isLast = index === transferData.timeline.length - 1;\n                  const isRecent = new Date(event.timestamp) > new Date(Date.now() - 5 * 60 * 1000); // Last 5 minutes\n\n                  return (\n                    <div \n                      key={event.id} \n                      className={`flex items-start gap-3 p-3 rounded-lg transition-all duration-300 ${\n                        isRecent ? 'bg-blue-50 border border-blue-200' : 'hover:bg-gray-50'\n                      }`}\n                    >\n                      <div className=\"flex flex-col items-center relative\">\n                        <div className={`p-1 rounded-full ${\n                          event.status === 'success' ? 'bg-green-100' :\n                          event.status === 'pending' ? 'bg-yellow-100' :\n                          'bg-red-100'\n                        }`}>\n                          <EventIcon className={`h-4 w-4 ${eventStatusDisplay.color}`} />\n                        </div>\n                        {!isLast && (\n                          <div className={`w-px h-8 mt-2 ${\n                            event.status === 'success' ? 'bg-green-300' : 'bg-gray-300'\n                          }`} />\n                        )}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-1\">\n                          <p className=\"font-medium text-sm sm:text-base\">{event.message}</p>\n                          <div className=\"flex items-center gap-2\">\n                            {isRecent && (\n                              <span className=\"text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded-full\">\n                                New\n                              </span>\n                            )}\n                            <span className=\"text-xs text-muted-foreground whitespace-nowrap\">\n                              {formatTimestamp(event.timestamp)}\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <p className={`text-xs capitalize font-medium ${eventStatusDisplay.color}`}>\n                            {event.status}\n                          </p>\n                          {event.metadata && Object.keys(event.metadata).length > 0 && (\n                            <span className=\"text-xs text-muted-foreground\">\n                              • Additional details available\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Last Updated */}\n        <div className=\"text-xs text-muted-foreground text-center border-t pt-4\">\n          Last updated: {formatTimestamp(transferData.lastUpdated)}\n          {autoRefresh && transferData.status !== TransferStatusEnum.COMPLETED && transferData.status !== TransferStatusEnum.FAILED && (\n            <span className=\"ml-2\">• Auto-refreshing every {refreshInterval / 1000}s</span>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6961, "column": 0}, "map": {"version":3,"sources":["file:///home/faros/stealth-money/packages/web/src/components/features/ProgressIndicator.tsx"],"sourcesContent":["\"use client\";\n\nimport { Calculator, User, CreditCard, CheckCircle } from \"lucide-react\";\nimport { TransferFlowStep } from \"./TransferFlowContainer\";\n\ninterface ProgressIndicatorProps {\n  currentStep: TransferFlowStep;\n  completedSteps: TransferFlowStep[];\n  onStepClick?: (step: TransferFlowStep) => void;\n}\n\ninterface StepConfig {\n  key: TransferFlowStep;\n  label: string;\n  shortLabel: string;\n  icon: React.ComponentType<{ className?: string }>;\n  description: string;\n}\n\nconst STEPS: StepConfig[] = [\n  {\n    key: 'calculator',\n    label: 'Calculate',\n    shortLabel: 'Calc',\n    icon: Calculator,\n    description: 'Enter transfer amount'\n  },\n  {\n    key: 'recipient',\n    label: 'Recipient',\n    shortLabel: 'Recipient',\n    icon: User,\n    description: 'Add recipient details'\n  },\n  {\n    key: 'payment',\n    label: 'Payment',\n    shortLabel: 'Pay',\n    icon: CreditCard,\n    description: 'Complete payment'\n  },\n  {\n    key: 'status',\n    label: 'Status',\n    shortLabel: 'Status',\n    icon: CheckCircle,\n    description: 'Track transfer'\n  }\n];\n\nexport function ProgressIndicator({ \n  currentStep, \n  completedSteps, \n  onStepClick \n}: ProgressIndicatorProps) {\n  const currentStepIndex = STEPS.findIndex(step => step.key === currentStep);\n  \n  const getStepStatus = (step: StepConfig, index: number) => {\n    if (completedSteps.includes(step.key)) {\n      return 'completed';\n    } else if (step.key === currentStep) {\n      return 'current';\n    } else if (index < currentStepIndex) {\n      return 'completed';\n    } else {\n      return 'upcoming';\n    }\n  };\n\n  const getStepStyles = (status: string, isClickable: boolean) => {\n    const baseStyles = \"relative flex items-center justify-center w-10 h-10 rounded-full border-2 transition-all duration-200\";\n    const clickableStyles = isClickable ? \"cursor-pointer hover:scale-105\" : \"\";\n    \n    switch (status) {\n      case 'completed':\n        return `${baseStyles} ${clickableStyles} bg-green-500 border-green-500 text-white`;\n      case 'current':\n        return `${baseStyles} ${clickableStyles} bg-blue-500 border-blue-500 text-white ring-4 ring-blue-100`;\n      case 'upcoming':\n        return `${baseStyles} bg-gray-100 border-gray-300 text-gray-400`;\n      default:\n        return `${baseStyles} bg-gray-100 border-gray-300 text-gray-400`;\n    }\n  };\n\n  const getConnectorStyles = (index: number) => {\n    const isCompleted = index < currentStepIndex || completedSteps.includes(STEPS[index].key);\n    return `flex-1 h-0.5 mx-2 transition-colors duration-300 ${\n      isCompleted ? 'bg-green-500' : 'bg-gray-300'\n    }`;\n  };\n\n  const handleStepClick = (step: StepConfig) => {\n    if (!onStepClick) return;\n    \n    // Allow clicking on completed steps or current step\n    const isClickable = completedSteps.includes(step.key) || step.key === currentStep;\n    if (isClickable) {\n      onStepClick(step.key);\n    }\n  };\n\n  return (\n    <div className=\"w-full\">\n      {/* Desktop Progress Indicator */}\n      <div className=\"hidden md:block\">\n        <div className=\"flex items-center justify-between\">\n          {STEPS.map((step, index) => {\n            const status = getStepStatus(step, index);\n            const isClickable = completedSteps.includes(step.key) || step.key === currentStep;\n            const Icon = step.icon;\n            \n            return (\n              <div key={step.key} className=\"flex items-center flex-1\">\n                {/* Step Circle */}\n                <div className=\"flex flex-col items-center\">\n                  <div\n                    className={getStepStyles(status, isClickable)}\n                    onClick={() => handleStepClick(step)}\n                    role={isClickable ? \"button\" : undefined}\n                    tabIndex={isClickable ? 0 : undefined}\n                    onKeyDown={(e) => {\n                      if (isClickable && (e.key === 'Enter' || e.key === ' ')) {\n                        e.preventDefault();\n                        handleStepClick(step);\n                      }\n                    }}\n                  >\n                    {status === 'completed' ? (\n                      <CheckCircle className=\"w-5 h-5\" />\n                    ) : (\n                      <Icon className=\"w-5 h-5\" />\n                    )}\n                  </div>\n                  \n                  {/* Step Label */}\n                  <div className=\"mt-2 text-center\">\n                    <div className={`text-sm font-medium ${\n                      status === 'current' ? 'text-blue-600' :\n                      status === 'completed' ? 'text-green-600' :\n                      'text-gray-500'\n                    }`}>\n                      {step.label}\n                    </div>\n                    <div className=\"text-xs text-gray-400 mt-1\">\n                      {step.description}\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Connector Line */}\n                {index < STEPS.length - 1 && (\n                  <div className={getConnectorStyles(index)} />\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      \n      {/* Mobile Progress Indicator */}\n      <div className=\"md:hidden\">\n        <div className=\"flex items-center justify-between mb-4\">\n          {STEPS.map((step, index) => {\n            const status = getStepStatus(step, index);\n            const isClickable = completedSteps.includes(step.key) || step.key === currentStep;\n            const Icon = step.icon;\n            \n            return (\n              <div key={step.key} className=\"flex items-center flex-1\">\n                {/* Step Circle */}\n                <div className=\"flex flex-col items-center\">\n                  <div\n                    className={getStepStyles(status, isClickable)}\n                    onClick={() => handleStepClick(step)}\n                    role={isClickable ? \"button\" : undefined}\n                    tabIndex={isClickable ? 0 : undefined}\n                    onKeyDown={(e) => {\n                      if (isClickable && (e.key === 'Enter' || e.key === ' ')) {\n                        e.preventDefault();\n                        handleStepClick(step);\n                      }\n                    }}\n                  >\n                    {status === 'completed' ? (\n                      <CheckCircle className=\"w-4 h-4\" />\n                    ) : (\n                      <Icon className=\"w-4 h-4\" />\n                    )}\n                  </div>\n                  \n                  {/* Step Label - Shorter for mobile */}\n                  <div className=\"mt-1 text-center\">\n                    <div className={`text-xs font-medium ${\n                      status === 'current' ? 'text-blue-600' :\n                      status === 'completed' ? 'text-green-600' :\n                      'text-gray-500'\n                    }`}>\n                      {step.shortLabel}\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Connector Line */}\n                {index < STEPS.length - 1 && (\n                  <div className={`flex-1 h-0.5 mx-1 ${\n                    index < currentStepIndex || completedSteps.includes(STEPS[index].key)\n                      ? 'bg-green-500' \n                      : 'bg-gray-300'\n                  }`} />\n                )}\n              </div>\n            );\n          })}\n        </div>\n        \n        {/* Current Step Description for Mobile */}\n        <div className=\"text-center\">\n          <div className=\"text-sm text-gray-600\">\n            Step {currentStepIndex + 1} of {STEPS.length}: {STEPS[currentStepIndex]?.description}\n          </div>\n        </div>\n      </div>\n      \n      {/* Progress Bar */}\n      <div className=\"mt-4\">\n        <div className=\"flex justify-between text-xs text-gray-500 mb-1\">\n          <span>Progress</span>\n          <span>{Math.round(((currentStepIndex + 1) / STEPS.length) * 100)}%</span>\n        </div>\n        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n          <div \n            className=\"bg-gradient-to-r from-blue-500 to-green-500 h-2 rounded-full transition-all duration-500 ease-out\"\n            style={{ \n              width: `${((currentStepIndex + 1) / STEPS.length) * 100}%` \n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 7325, "column": 0}, "map": {"version":3,"sources":["file:///home/faros/stealth-money/packages/web/src/components/features/BankAccountVerification.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '@clerk/nextjs';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { AlertCircle, CheckCircle, Clock, RefreshCw, DollarSign } from 'lucide-react';\n\ninterface BankAccount {\n  id: string;\n  accountName: string;\n  currency: string;\n  bankName: string;\n  accountHolderName: string;\n  isVerified: boolean;\n  verificationMethod?: string;\n  verificationStartedAt?: string;\n  verificationFailures: number;\n  accountNumber?: string;\n  iban?: string;\n  country: string;\n}\n\ninterface VerificationProps {\n  account: BankAccount;\n  onVerificationComplete: (accountId: string) => void;\n  onSkip?: () => void;\n}\n\nexport function BankAccountVerification({ account, onVerificationComplete, onSkip }: VerificationProps) {\n  const { getToken } = useAuth();\n  const [verificationMethod, setVerificationMethod] = useState<'micro_deposits' | 'instant' | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  \n  // Micro-deposit verification state\n  const [depositAmounts, setDepositAmounts] = useState(['', '']);\n  const [verificationStatus, setVerificationStatus] = useState<'pending' | 'deposits_sent' | 'verifying' | 'verified' | 'failed'>('pending');\n\n  // Check verification status on component mount\n  useEffect(() => {\n    if (account.verificationMethod === 'micro_deposits' && account.verificationStartedAt) {\n      setVerificationMethod('micro_deposits');\n      setVerificationStatus('deposits_sent');\n    }\n  }, [account]);\n\n  // Start micro-deposit verification\n  const startMicroDepositVerification = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const token = await getToken();\n      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000'}/api/users/me/bank-accounts/${account.id}/verify/micro-deposits`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || 'Failed to start verification');\n      }\n\n      setVerificationMethod('micro_deposits');\n      setVerificationStatus('deposits_sent');\n      setSuccess('Micro-deposits have been sent to your account. They will appear within 1-2 business days.');\n    } catch (error) {\n      console.error('Micro-deposit verification error:', error);\n      setError(error instanceof Error ? error.message : 'Failed to start verification');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Verify micro-deposit amounts\n  const verifyMicroDeposits = async () => {\n    if (!depositAmounts[0] || !depositAmounts[1]) {\n      setError('Please enter both deposit amounts');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    setVerificationStatus('verifying');\n\n    try {\n      const token = await getToken();\n      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000'}/api/users/me/bank-accounts/${account.id}/verify/micro-deposits/confirm`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          amounts: depositAmounts.map(amount => parseFloat(amount))\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || 'Verification failed');\n      }\n\n      setVerificationStatus('verified');\n      setSuccess('Account verified successfully!');\n      \n      // Call completion handler after a brief delay\n      setTimeout(() => {\n        onVerificationComplete(account.id);\n      }, 2000);\n    } catch (error) {\n      console.error('Micro-deposit confirmation error:', error);\n      setError(error instanceof Error ? error.message : 'Verification failed');\n      setVerificationStatus('failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Start instant verification (would integrate with Plaid or similar)\n  const startInstantVerification = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // This would integrate with Plaid Link or similar service\n      // For now, we'll simulate instant verification\n      setSuccess('Instant verification would launch here (Plaid integration)');\n      \n      // Simulate successful verification\n      setTimeout(() => {\n        onVerificationComplete(account.id);\n      }, 3000);\n    } catch (error) {\n      console.error('Instant verification error:', error);\n      setError('Instant verification is not available for this account');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get verification method display info\n  const getVerificationMethodInfo = (method: string) => {\n    switch (method) {\n      case 'micro_deposits':\n        return {\n          name: 'Micro-Deposits',\n          description: 'We send small deposits to verify account ownership',\n          icon: <DollarSign className=\"h-5 w-5\" />\n        };\n      case 'instant':\n        return {\n          name: 'Instant Verification',\n          description: 'Connect securely through your online banking',\n          icon: <CheckCircle className=\"h-5 w-5\" />\n        };\n      default:\n        return {\n          name: 'Unknown',\n          description: 'Unknown verification method',\n          icon: <AlertCircle className=\"h-5 w-5\" />\n        };\n    }\n  };\n\n  // Render verification method selection\n  const renderMethodSelection = () => (\n    <div className=\"space-y-4\">\n      <div className=\"text-center mb-6\">\n        <h3 className=\"text-lg font-semibold mb-2\">Verify Your Bank Account</h3>\n        <p className=\"text-gray-600\">\n          To send and receive money, we need to verify that you own this account.\n        </p>\n      </div>\n\n      <div className=\"space-y-3\">\n        {/* Micro-Deposits Option */}\n        <Card \n          className=\"cursor-pointer hover:shadow-md transition-shadow border-2 hover:border-blue-200\"\n          onClick={() => !isLoading && startMicroDepositVerification()}\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"flex-shrink-0\">\n                <DollarSign className=\"h-6 w-6 text-green-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <h4 className=\"font-semibold\">Micro-Deposits (Recommended)</h4>\n                <p className=\"text-sm text-gray-600\">\n                  We'll send 2 small deposits (under $1) to your account. Verify the amounts to complete setup.\n                </p>\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  Takes 1-2 business days • Most secure method\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Instant Verification Option */}\n        <Card \n          className=\"cursor-pointer hover:shadow-md transition-shadow border-2 hover:border-blue-200\"\n          onClick={() => !isLoading && startInstantVerification()}\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"flex-shrink-0\">\n                <CheckCircle className=\"h-6 w-6 text-blue-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <h4 className=\"font-semibold\">Instant Verification</h4>\n                <p className=\"text-sm text-gray-600\">\n                  Connect through your online banking for immediate verification.\n                </p>\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  Instant setup • Powered by Plaid\n                </p>\n              </div>\n              <Badge variant=\"secondary\" className=\"text-xs\">Coming Soon</Badge>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n\n  // Render micro-deposit entry\n  const renderMicroDepositEntry = () => (\n    <div className=\"space-y-4\">\n      <div className=\"text-center mb-6\">\n        <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">Micro-Deposits Sent</h3>\n        <p className=\"text-gray-600\">\n          We've sent 2 small deposits to your {account.bankName} account ending in {account.accountNumber?.slice(-4) || '****'}.\n        </p>\n        <p className=\"text-sm text-gray-500 mt-2\">\n          Check your account statement and enter the exact amounts below.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <Label htmlFor=\"deposit1\">First Deposit Amount</Label>\n          <div className=\"relative\">\n            <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500\">$</span>\n            <Input\n              id=\"deposit1\"\n              type=\"number\"\n              step=\"0.01\"\n              min=\"0\"\n              max=\"1\"\n              placeholder=\"0.XX\"\n              className=\"pl-8\"\n              value={depositAmounts[0]}\n              onChange={(e) => setDepositAmounts([e.target.value, depositAmounts[1]])}\n            />\n          </div>\n        </div>\n        <div>\n          <Label htmlFor=\"deposit2\">Second Deposit Amount</Label>\n          <div className=\"relative\">\n            <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500\">$</span>\n            <Input\n              id=\"deposit2\"\n              type=\"number\"\n              step=\"0.01\"\n              min=\"0\"\n              max=\"1\"\n              placeholder=\"0.XX\"\n              className=\"pl-8\"\n              value={depositAmounts[1]}\n              onChange={(e) => setDepositAmounts([depositAmounts[0], e.target.value])}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex space-x-3\">\n        <Button\n          onClick={verifyMicroDeposits}\n          disabled={isLoading || !depositAmounts[0] || !depositAmounts[1]}\n          className=\"flex-1\"\n        >\n          {isLoading ? (\n            <>\n              <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n              Verifying...\n            </>\n          ) : (\n            'Verify Account'\n          )}\n        </Button>\n        <Button\n          variant=\"outline\"\n          onClick={() => {\n            setVerificationMethod(null);\n            setVerificationStatus('pending');\n            setDepositAmounts(['', '']);\n          }}\n        >\n          Back\n        </Button>\n      </div>\n\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 text-sm\">\n        <p className=\"text-blue-800\">\n          <strong>Can't find the deposits?</strong> They may take up to 2 business days to appear. \n          Look for deposits from \"Stealth Money\" or \"SM Verify\" in your transaction history.\n        </p>\n      </div>\n    </div>\n  );\n\n  // Render verification success\n  const renderSuccess = () => (\n    <div className=\"text-center space-y-4\">\n      <CheckCircle className=\"h-16 w-16 text-green-500 mx-auto\" />\n      <h3 className=\"text-xl font-semibold text-green-700\">Account Verified!</h3>\n      <p className=\"text-gray-600\">\n        Your {account.bankName} account has been successfully verified. You can now send and receive money.\n      </p>\n      <Badge className=\"bg-green-100 text-green-800\">\n        Verified {account.verificationMethod && getVerificationMethodInfo(account.verificationMethod).name}\n      </Badge>\n    </div>\n  );\n\n  // Render verification failed\n  const renderFailed = () => (\n    <div className=\"text-center space-y-4\">\n      <AlertCircle className=\"h-16 w-16 text-red-500 mx-auto\" />\n      <h3 className=\"text-xl font-semibold text-red-700\">Verification Failed</h3>\n      <p className=\"text-gray-600\">\n        The amounts you entered don't match our records. Please check your account statement and try again.\n      </p>\n      <p className=\"text-sm text-gray-500\">\n        Attempts remaining: {3 - account.verificationFailures}\n      </p>\n      <div className=\"flex space-x-3 justify-center\">\n        <Button\n          onClick={() => {\n            setVerificationStatus('deposits_sent');\n            setDepositAmounts(['', '']);\n            setError(null);\n          }}\n          disabled={account.verificationFailures >= 3}\n        >\n          Try Again\n        </Button>\n        {account.verificationFailures >= 3 && (\n          <Button variant=\"outline\" onClick={() => setVerificationMethod(null)}>\n            Choose Different Method\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n\n  return (\n    <Card className=\"w-full max-w-2xl mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <div className=\"flex items-center space-x-2\">\n            {account.isVerified ? (\n              <CheckCircle className=\"h-5 w-5 text-green-500\" />\n            ) : (\n              <Clock className=\"h-5 w-5 text-yellow-500\" />\n            )}\n            <span>\n              {account.accountName} ({account.currency})\n            </span>\n          </div>\n        </CardTitle>\n        <div className=\"text-sm text-gray-600\">\n          {account.bankName} • {account.accountHolderName}\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        {/* Status Messages */}\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <div className=\"flex items-center space-x-2 text-red-700\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span className=\"font-medium\">Verification Error</span>\n            </div>\n            <p className=\"text-red-600 mt-1\">{error}</p>\n          </div>\n        )}\n\n        {success && (\n          <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n            <div className=\"flex items-center space-x-2 text-green-700\">\n              <CheckCircle className=\"h-4 w-4\" />\n              <span className=\"font-medium\">Success</span>\n            </div>\n            <p className=\"text-green-600 mt-1\">{success}</p>\n          </div>\n        )}\n\n        {/* Main Content */}\n        {account.isVerified ? (\n          renderSuccess()\n        ) : verificationStatus === 'failed' ? (\n          renderFailed()\n        ) : verificationStatus === 'deposits_sent' ? (\n          renderMicroDepositEntry()\n        ) : verificationStatus === 'verified' ? (\n          renderSuccess()\n        ) : (\n          renderMethodSelection()\n        )}\n\n        {/* Skip Option */}\n        {onSkip && !account.isVerified && verificationStatus === 'pending' && (\n          <div className=\"pt-4 border-t\">\n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-600 mb-3\">\n                You can verify this account later, but you won't be able to send or receive money until it's verified.\n              </p>\n              <Button variant=\"outline\" onClick={onSkip}>\n                Skip for Now\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 8274, "column": 0}, "map": {"version":3,"sources":["file:///home/faros/stealth-money/packages/web/src/lib/bank-config.ts"],"sourcesContent":["/**\n * Bank configuration by country\n * This defines the banking infrastructure for each supported country\n */\n\nexport interface Bank {\n  id: string;\n  name: string;\n  code: string;\n  swift?: string;\n  logo?: string;\n}\n\nexport interface CountryBankingConfig {\n  countryCode: string;\n  countryName: string;\n  currency: string;\n  flag: string;\n  banks: Bank[];\n  accountTypes: Array<{\n    value: string;\n    label: string;\n  }>;\n  requiredFields: Array<{\n    field: string;\n    label: string;\n    type: 'text' | 'number' | 'select';\n    placeholder?: string;\n    validation?: string;\n    maxLength?: number;\n  }>;\n}\n\n// Chilean RUT validation helper\nexport function validateRUT(rut: string): boolean {\n  // Remove dots and hyphen\n  const cleanRut = rut.replace(/\\./g, '').replace(/-/g, '');\n  if (cleanRut.length < 8 || cleanRut.length > 9) return false;\n  \n  const body = cleanRut.slice(0, -1);\n  const dv = cleanRut.slice(-1).toUpperCase();\n  \n  // Calculate verification digit\n  let sum = 0;\n  let multiplier = 2;\n  \n  for (let i = body.length - 1; i >= 0; i--) {\n    sum += parseInt(body[i]) * multiplier;\n    multiplier = multiplier === 7 ? 2 : multiplier + 1;\n  }\n  \n  const expectedDV = 11 - (sum % 11);\n  const calculatedDV = expectedDV === 11 ? '0' : expectedDV === 10 ? 'K' : expectedDV.toString();\n  \n  return dv === calculatedDV;\n}\n\n// Format RUT for display\nexport function formatRUT(rut: string): string {\n  const cleanRut = rut.replace(/\\./g, '').replace(/-/g, '');\n  if (cleanRut.length < 2) return cleanRut;\n  \n  const body = cleanRut.slice(0, -1);\n  const dv = cleanRut.slice(-1);\n  \n  // Add dots every 3 digits from right to left\n  const formatted = body.replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n  return `${formatted}-${dv}`;\n}\n\nexport const COUNTRY_BANKING_CONFIGS: Record<string, CountryBankingConfig> = {\n  // Chile\n  CL: {\n    countryCode: 'CL',\n    countryName: 'Chile',\n    currency: 'CLP',\n    flag: '🇨🇱',\n    banks: [\n      { id: 'cl-001', name: 'Banco de Chile', code: '001' },\n      { id: 'cl-012', name: 'Banco del Estado (BancoEstado)', code: '012' },\n      { id: 'cl-016', name: 'Banco de Crédito e Inversiones (BCI)', code: '016' },\n      { id: 'cl-037', name: 'Banco Santander Chile', code: '037' },\n      { id: 'cl-039', name: 'Banco Itaú Chile', code: '039' },\n      { id: 'cl-049', name: 'Banco Security', code: '049' },\n      { id: 'cl-051', name: 'Banco Falabella', code: '051' },\n      { id: 'cl-053', name: 'Banco Ripley', code: '053' },\n      { id: 'cl-054', name: 'Banco Consorcio', code: '054' },\n      { id: 'cl-055', name: 'Banco BICE', code: '055' },\n      { id: 'cl-504', name: 'Scotiabank Chile', code: '504' },\n    ],\n    accountTypes: [\n      { value: 'checking', label: 'Cuenta Corriente' },\n      { value: 'savings', label: 'Cuenta de Ahorro' },\n      { value: 'vista', label: 'Cuenta Vista' },\n      { value: 'rut', label: 'Cuenta RUT (BancoEstado)' }\n    ],\n    requiredFields: [\n      {\n        field: 'rut',\n        label: 'RUT del Titular',\n        type: 'text',\n        placeholder: '12.345.678-9',\n        validation: 'Chilean RUT',\n        maxLength: 12\n      },\n      {\n        field: 'accountNumber',\n        label: 'Número de Cuenta',\n        type: 'text',\n        placeholder: '0123456789',\n        maxLength: 20\n      }\n    ]\n  },\n\n  // United States\n  US: {\n    countryCode: 'US',\n    countryName: 'United States',\n    currency: 'USD',\n    flag: '🇺🇸',\n    banks: [\n      { id: 'us-boa', name: 'Bank of America', code: 'BOFAUS3N', swift: 'BOFAUS3N' },\n      { id: 'us-chase', name: 'JPMorgan Chase', code: 'CHASUS33', swift: 'CHASUS33' },\n      { id: 'us-wells', name: 'Wells Fargo', code: 'WFBIUS6S', swift: 'WFBIUS6S' },\n      { id: 'us-citi', name: 'Citibank', code: 'CITIUS33', swift: 'CITIUS33' },\n      { id: 'us-pnc', name: 'PNC Bank', code: 'PNCCUS33', swift: 'PNCCUS33' },\n      { id: 'us-usbank', name: 'U.S. Bank', code: 'USBKUS44', swift: 'USBKUS44' },\n      { id: 'us-capital', name: 'Capital One', code: 'HIBKUS44', swift: 'HIBKUS44' },\n      { id: 'us-td', name: 'TD Bank', code: 'NRTHUS33', swift: 'NRTHUS33' },\n      { id: 'us-regions', name: 'Regions Bank', code: 'UPNBUS44', swift: 'UPNBUS44' },\n      { id: 'us-fifth', name: 'Fifth Third Bank', code: 'FTBCUS3C', swift: 'FTBCUS3C' }\n    ],\n    accountTypes: [\n      { value: 'checking', label: 'Checking Account' },\n      { value: 'savings', label: 'Savings Account' },\n      { value: 'money_market', label: 'Money Market Account' }\n    ],\n    requiredFields: [\n      {\n        field: 'routingNumber',\n        label: 'Routing Number (ABA)',\n        type: 'text',\n        placeholder: '123456789',\n        validation: 'US Routing Number',\n        maxLength: 9\n      },\n      {\n        field: 'accountNumber',\n        label: 'Account Number',\n        type: 'text',\n        placeholder: '1234567890',\n        maxLength: 17\n      }\n    ]\n  },\n\n  // Germany (EUR)\n  DE: {\n    countryCode: 'DE',\n    countryName: 'Germany',\n    currency: 'EUR',\n    flag: '🇩🇪',\n    banks: [\n      { id: 'de-deutsche', name: 'Deutsche Bank', code: 'DEUTDEFF', swift: 'DEUTDEFF' },\n      { id: 'de-commerzbank', name: 'Commerzbank', code: 'COBADEFF', swift: 'COBADEFF' },\n      { id: 'de-dkb', name: 'DKB (Deutsche Kreditbank)', code: 'BYLADEM1', swift: 'BYLADEM1' },\n      { id: 'de-postbank', name: 'Postbank', code: 'PBNKDEFF', swift: 'PBNKDEFF' },\n      { id: 'de-sparkasse', name: 'Sparkasse', code: 'VARIES', swift: 'VARIES' },\n      { id: 'de-volksbank', name: 'Volksbank', code: 'VARIES', swift: 'VARIES' },\n      { id: 'de-hypovereins', name: 'HypoVereinsbank', code: 'HYVEDEMMXXX', swift: 'HYVEDEMMXXX' }\n    ],\n    accountTypes: [\n      { value: 'girokonto', label: 'Girokonto (Checking)' },\n      { value: 'sparkonto', label: 'Sparkonto (Savings)' },\n      { value: 'tagesgeld', label: 'Tagesgeldkonto (Daily Savings)' }\n    ],\n    requiredFields: [\n      {\n        field: 'iban',\n        label: 'IBAN',\n        type: 'text',\n        placeholder: 'DE89 3704 0044 0532 0130 00',\n        validation: 'IBAN',\n        maxLength: 34\n      }\n    ]\n  },\n\n  // Spain (EUR)\n  ES: {\n    countryCode: 'ES',\n    countryName: 'Spain',\n    currency: 'EUR',\n    flag: '🇪🇸',\n    banks: [\n      { id: 'es-santander', name: 'Banco Santander', code: 'BSCHESMMXXX', swift: 'BSCHESMMXXX' },\n      { id: 'es-bbva', name: 'BBVA', code: 'BBVAESMMXXX', swift: 'BBVAESMMXXX' },\n      { id: 'es-caixa', name: 'CaixaBank', code: 'CAIXESBBXXX', swift: 'CAIXESBBXXX' },\n      { id: 'es-sabadell', name: 'Banco Sabadell', code: 'BSABESBBXXX', swift: 'BSABESBBXXX' },\n      { id: 'es-bankinter', name: 'Bankinter', code: 'BKBKESMMXXX', swift: 'BKBKESMMXXX' },\n      { id: 'es-unicaja', name: 'Unicaja Banco', code: 'UCJAES2MXXX', swift: 'UCJAES2MXXX' }\n    ],\n    accountTypes: [\n      { value: 'corriente', label: 'Cuenta Corriente' },\n      { value: 'ahorro', label: 'Cuenta de Ahorro' },\n      { value: 'nomina', label: 'Cuenta Nómina' }\n    ],\n    requiredFields: [\n      {\n        field: 'iban',\n        label: 'IBAN',\n        type: 'text',\n        placeholder: 'ES91 2100 0418 4502 0005 1332',\n        validation: 'IBAN',\n        maxLength: 34\n      }\n    ]\n  },\n\n  // France (EUR)\n  FR: {\n    countryCode: 'FR',\n    countryName: 'France', \n    currency: 'EUR',\n    flag: '🇫🇷',\n    banks: [\n      { id: 'fr-bnp', name: 'BNP Paribas', code: 'BNPAFRPPXXX', swift: 'BNPAFRPPXXX' },\n      { id: 'fr-credit-agricole', name: 'Crédit Agricole', code: 'AGRIFRPPXXX', swift: 'AGRIFRPPXXX' },\n      { id: 'fr-societe', name: 'Société Générale', code: 'SOGEFRPPXXX', swift: 'SOGEFRPPXXX' },\n      { id: 'fr-credit-mutuel', name: 'Crédit Mutuel', code: 'CMCIFRPPXXX', swift: 'CMCIFRPPXXX' },\n      { id: 'fr-banque-postale', name: 'La Banque Postale', code: 'PSSTFRPPXXX', swift: 'PSSTFRPPXXX' },\n      { id: 'fr-lcl', name: 'LCL', code: 'CRLYFRPPXXX', swift: 'CRLYFRPPXXX' }\n    ],\n    accountTypes: [\n      { value: 'courant', label: 'Compte Courant' },\n      { value: 'epargne', label: 'Compte Épargne' },\n      { value: 'livret_a', label: 'Livret A' }\n    ],\n    requiredFields: [\n      {\n        field: 'iban',\n        label: 'IBAN',\n        type: 'text',\n        placeholder: 'FR14 2004 1010 0505 0001 3M02 606',\n        validation: 'IBAN',\n        maxLength: 34\n      }\n    ]\n  },\n\n  // Italy (EUR)\n  IT: {\n    countryCode: 'IT',\n    countryName: 'Italy',\n    currency: 'EUR',\n    flag: '🇮🇹',\n    banks: [\n      { id: 'it-unicredit', name: 'UniCredit', code: 'UNCRITMMXXX', swift: 'UNCRITMMXXX' },\n      { id: 'it-intesa', name: 'Intesa Sanpaolo', code: 'BCITITMM', swift: 'BCITITMM' },\n      { id: 'it-mps', name: 'Monte dei Paschi di Siena', code: 'PASCITMMXXX', swift: 'PASCITMMXXX' },\n      { id: 'it-bnl', name: 'BNL (BNP Paribas)', code: 'BNLIITRR', swift: 'BNLIITRR' },\n      { id: 'it-banco-bpm', name: 'Banco BPM', code: 'BAPPIT21', swift: 'BAPPIT21' }\n    ],\n    accountTypes: [\n      { value: 'corrente', label: 'Conto Corrente' },\n      { value: 'risparmio', label: 'Conto di Risparmio' },\n      { value: 'deposito', label: 'Conto Deposito' }\n    ],\n    requiredFields: [\n      {\n        field: 'iban',\n        label: 'IBAN',\n        type: 'text',\n        placeholder: 'IT60 X054 2811 1010 0000 0123 456',\n        validation: 'IBAN',\n        maxLength: 34\n      }\n    ]\n  },\n\n  // Mexico\n  MX: {\n    countryCode: 'MX',\n    countryName: 'Mexico',\n    currency: 'MXN',\n    flag: '🇲🇽',\n    banks: [\n      { id: 'mx-bbva', name: 'BBVA México', code: '012', swift: 'BCMRMXMM' },\n      { id: 'mx-santander', name: 'Santander México', code: '014', swift: 'BMSXMXMM' },\n      { id: 'mx-banamex', name: 'Citibanamex', code: '002', swift: 'BNMXMXMM' },\n      { id: 'mx-banorte', name: 'Banorte', code: '072', swift: 'MENOMXMT' },\n      { id: 'mx-hsbc', name: 'HSBC México', code: '021', swift: 'BIMEMXMM' },\n      { id: 'mx-scotiabank', name: 'Scotiabank', code: '044', swift: 'MBCOMXMM' },\n      { id: 'mx-inbursa', name: 'Inbursa', code: '036', swift: 'INBUMXMM' },\n      { id: 'mx-azteca', name: 'Banco Azteca', code: '127', swift: 'AZTKMXMM' }\n    ],\n    accountTypes: [\n      { value: 'checking', label: 'Cuenta de Cheques' },\n      { value: 'savings', label: 'Cuenta de Ahorro' },\n      { value: 'payroll', label: 'Cuenta de Nómina' }\n    ],\n    requiredFields: [\n      {\n        field: 'clabe',\n        label: 'CLABE',\n        type: 'text',\n        placeholder: '012345678901234567',\n        validation: 'CLABE',\n        maxLength: 18\n      }\n    ]\n  },\n\n  // United Kingdom\n  GB: {\n    countryCode: 'GB',\n    countryName: 'United Kingdom',\n    currency: 'GBP',\n    flag: '🇬🇧',\n    banks: [\n      { id: 'gb-hsbc', name: 'HSBC UK', code: 'HBUKGB4B', swift: 'HBUKGB4B' },\n      { id: 'gb-barclays', name: 'Barclays', code: 'BUKBGB22', swift: 'BUKBGB22' },\n      { id: 'gb-lloyds', name: 'Lloyds Bank', code: 'LOYDGB2L', swift: 'LOYDGB2L' },\n      { id: 'gb-natwest', name: 'NatWest', code: 'NWBKGB2L', swift: 'NWBKGB2L' },\n      { id: 'gb-santander', name: 'Santander UK', code: 'ABBYGB2L', swift: 'ABBYGB2L' },\n      { id: 'gb-halifax', name: 'Halifax', code: 'HLFXGB21', swift: 'HLFXGB21' },\n      { id: 'gb-nationwide', name: 'Nationwide', code: 'NAIAGB21', swift: 'NAIAGB21' },\n      { id: 'gb-metro', name: 'Metro Bank', code: 'MYMBGB2L', swift: 'MYMBGB2L' }\n    ],\n    accountTypes: [\n      { value: 'current', label: 'Current Account' },\n      { value: 'savings', label: 'Savings Account' },\n      { value: 'isa', label: 'ISA Account' }\n    ],\n    requiredFields: [\n      {\n        field: 'sortCode',\n        label: 'Sort Code',\n        type: 'text',\n        placeholder: '12-34-56',\n        validation: 'UK Sort Code',\n        maxLength: 8\n      },\n      {\n        field: 'accountNumber',\n        label: 'Account Number',\n        type: 'text',\n        placeholder: '12345678',\n        validation: 'UK Account Number',\n        maxLength: 8\n      }\n    ]\n  }\n};\n\n// Helper functions\nexport function getCountriesForCurrency(currency: string): CountryBankingConfig[] {\n  return Object.values(COUNTRY_BANKING_CONFIGS).filter(config => config.currency === currency);\n}\n\nexport function getBankByCode(countryCode: string, bankCode: string): Bank | undefined {\n  const country = COUNTRY_BANKING_CONFIGS[countryCode];\n  if (!country) return undefined;\n  return country.banks.find(bank => bank.code === bankCode);\n}\n\n// Validation functions for different account number formats\nexport function validateIBAN(iban: string): boolean {\n  // Remove spaces and convert to uppercase\n  const cleanIBAN = iban.replace(/\\s/g, '').toUpperCase();\n  \n  // Check basic format\n  if (!/^[A-Z]{2}[0-9]{2}[A-Z0-9]+$/.test(cleanIBAN)) return false;\n  \n  // Check length for specific countries\n  const countryLengths: Record<string, number> = {\n    DE: 22, ES: 24, FR: 27, IT: 27, GB: 22\n  };\n  \n  const countryCode = cleanIBAN.substring(0, 2);\n  if (countryLengths[countryCode] && cleanIBAN.length !== countryLengths[countryCode]) {\n    return false;\n  }\n  \n  // TODO: Implement full IBAN checksum validation\n  return true;\n}\n\nexport function validateCLABE(clabe: string): boolean {\n  // CLABE must be exactly 18 digits\n  const cleanCLABE = clabe.replace(/\\s/g, '');\n  if (!/^\\d{18}$/.test(cleanCLABE)) return false;\n  \n  // TODO: Implement CLABE checksum validation\n  return true;\n}\n\nexport function validateUSRoutingNumber(routing: string): boolean {\n  // Must be exactly 9 digits\n  return /^\\d{9}$/.test(routing);\n}\n\nexport function validateUKSortCode(sortCode: string): boolean {\n  // Can be 6 digits or formatted as XX-XX-XX\n  const clean = sortCode.replace(/-/g, '');\n  return /^\\d{6}$/.test(clean);\n}\n\nexport function formatSortCode(sortCode: string): string {\n  const clean = sortCode.replace(/-/g, '');\n  if (clean.length >= 4) {\n    return `${clean.slice(0, 2)}-${clean.slice(2, 4)}-${clean.slice(4, 6)}`;\n  }\n  return clean;\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 9022, "column": 0}, "map": {"version":3,"sources":["file:///home/faros/stealth-money/packages/web/src/components/features/BankAccountOnboardingV2.tsx"],"sourcesContent":["// src/components/features/BankAccountOnboardingV2.tsx\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '@clerk/nextjs';\nimport { CheckCircle, AlertCircle, Plus, Trash2, Edit, Globe, Building2, CreditCard, User } from 'lucide-react';\nimport { BankAccountVerification } from './BankAccountVerification';\nimport { \n  COUNTRY_BANKING_CONFIGS, \n  validateRUT, \n  formatRUT, \n  validateIBAN, \n  validateCLABE,\n  validateUSRoutingNumber,\n  validateUKSortCode,\n  formatSortCode,\n  type CountryBankingConfig,\n  type Bank\n} from '@/lib/bank-config';\n\ninterface BankAccount {\n  id: string;\n  accountName: string;\n  currency: string;\n  country: string;\n  bankName: string;\n  bankCode?: string;\n  accountHolderName: string;\n  accountType?: string;\n  isVerified: boolean;\n  isPrimary: boolean;\n  isActive: boolean;\n  // Currency-specific fields\n  iban?: string;\n  bic?: string;\n  routingNumber?: string;\n  accountNumber?: string;\n  rut?: string;\n  clabe?: string;\n  sortCode?: string;\n  ukAccountNumber?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface BankAccountFormData {\n  accountName: string;\n  country: string;\n  bankId: string;\n  accountHolderName: string;\n  accountType: string;\n  isPrimary: boolean;\n  // Dynamic fields based on country\n  [key: string]: string | boolean;\n}\n\ninterface BankAccountOnboardingV2Props {\n  onComplete?: () => void;\n  onSkip?: () => void;\n  requireVerification?: boolean;\n  onAccountAdded?: () => void; // New callback for when account is added (not necessarily verified)\n}\n\nexport default function BankAccountOnboardingV2({ \n  onComplete, \n  onSkip, \n  requireVerification = false,\n  onAccountAdded\n}: BankAccountOnboardingV2Props) {\n  const { getToken } = useAuth();\n  const [bankAccounts, setBankAccounts] = useState<BankAccount[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [editingAccount, setEditingAccount] = useState<BankAccount | null>(null);\n  const [submitting, setSubmitting] = useState(false);\n  \n  // Form state\n  const [selectedCountry, setSelectedCountry] = useState<string>('');\n  const [selectedBank, setSelectedBank] = useState<Bank | null>(null);\n  const [formData, setFormData] = useState<BankAccountFormData>({\n    accountName: '',\n    country: '',\n    bankId: '',\n    accountHolderName: '',\n    accountType: '',\n    isPrimary: false\n  });\n  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\n  const [successMessage, setSuccessMessage] = useState<string>('');\n  const [verifyingAccount, setVerifyingAccount] = useState<BankAccount | null>(null);\n\n  // Get country configuration\n  const countryConfig = selectedCountry ? COUNTRY_BANKING_CONFIGS[selectedCountry] : null;\n\n  // Fetch existing bank accounts\n  const fetchBankAccounts = async () => {\n    try {\n      const token = await getToken();\n      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000'}/api/users/me/bank-accounts`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (response.ok) {\n        const responseData = await response.json();\n        // Handle both response formats: array or { bankAccounts: [...] }\n        const accounts = responseData.bankAccounts || responseData;\n        setBankAccounts(Array.isArray(accounts) ? accounts : []);\n      } else {\n        setBankAccounts([]);\n      }\n    } catch (error) {\n      console.error('Error fetching bank accounts:', error);\n      setBankAccounts([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchBankAccounts();\n  }, []);\n\n  // Handle country selection\n  const handleCountryChange = (countryCode: string) => {\n    setSelectedCountry(countryCode);\n    setSelectedBank(null);\n    const config = COUNTRY_BANKING_CONFIGS[countryCode];\n    \n    // Reset form data with country-specific defaults\n    setFormData({\n      accountName: '',\n      country: countryCode,\n      bankId: '',\n      accountHolderName: '',\n      accountType: config?.accountTypes[0]?.value || '',\n      isPrimary: !Array.isArray(bankAccounts) || bankAccounts.length === 0\n    });\n    setFormErrors({});\n  };\n\n  // Handle bank selection\n  const handleBankChange = (bankId: string) => {\n    if (!countryConfig) return;\n    \n    const bank = countryConfig.banks.find(b => b.id === bankId);\n    setSelectedBank(bank || null);\n    setFormData(prev => ({ ...prev, bankId }));\n  };\n\n  // Validate form fields\n  const validateForm = (): boolean => {\n    const errors: Record<string, string> = {};\n\n    if (!formData.accountName.trim()) {\n      errors.accountName = 'Account name is required';\n    }\n\n    if (!selectedCountry) {\n      errors.country = 'Please select a country';\n    }\n\n    if (!selectedBank) {\n      errors.bankId = 'Please select a bank';\n    }\n\n    if (!formData.accountHolderName.trim()) {\n      errors.accountHolderName = 'Account holder name is required';\n    }\n\n    if (!formData.accountType) {\n      errors.accountType = 'Account type is required';\n    }\n\n    // Validate country-specific fields\n    if (countryConfig) {\n      for (const field of countryConfig.requiredFields) {\n        const value = formData[field.field];\n        \n        if (!value || typeof value !== 'string' || !value.trim()) {\n          errors[field.field] = `${field.label} is required`;\n          continue;\n        }\n\n        // Field-specific validation\n        switch (field.validation) {\n          case 'Chilean RUT':\n            if (!validateRUT(value)) {\n              errors[field.field] = 'Invalid RUT format';\n            }\n            break;\n          case 'IBAN':\n            if (!validateIBAN(value)) {\n              errors[field.field] = 'Invalid IBAN format';\n            }\n            break;\n          case 'CLABE':\n            if (!validateCLABE(value)) {\n              errors[field.field] = 'CLABE must be 18 digits';\n            }\n            break;\n          case 'US Routing Number':\n            if (!validateUSRoutingNumber(value)) {\n              errors[field.field] = 'Routing number must be 9 digits';\n            }\n            break;\n          case 'UK Sort Code':\n            if (!validateUKSortCode(value)) {\n              errors[field.field] = 'Sort code must be 6 digits';\n            }\n            break;\n        }\n      }\n    }\n\n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm() || !selectedBank || !countryConfig) {\n      return;\n    }\n\n    setSubmitting(true);\n\n    try {\n      const token = await getToken();\n      \n      // Prepare submission data\n      const submissionData: any = {\n        accountName: formData.accountName,\n        currency: countryConfig.currency,\n        country: selectedCountry,\n        bankName: selectedBank.name,\n        bankCode: selectedBank.code,\n        accountHolderName: formData.accountHolderName,\n        accountType: formData.accountType,\n        isPrimary: formData.isPrimary\n      };\n\n      // Add country-specific fields\n      countryConfig.requiredFields.forEach(field => {\n        if (formData[field.field]) {\n          submissionData[field.field] = formData[field.field];\n        }\n      });\n\n      const url = editingAccount \n        ? `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000'}/api/users/me/bank-accounts/${editingAccount.id}`\n        : `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000'}/api/users/me/bank-accounts`;\n      \n      const method = editingAccount ? 'PUT' : 'POST';\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(submissionData)\n      });\n\n      if (response.ok) {\n        const createdAccount = await response.json();\n        console.log('Bank account created successfully:', createdAccount);\n        \n        await fetchBankAccounts();\n        resetForm();\n        setShowAddForm(false);\n        setEditingAccount(null);\n        \n        // Show success message\n        setSuccessMessage(`✅ ${createdAccount.bankName} account added successfully! Verification required to start sending money.`);\n        \n        // Clear success message after 5 seconds\n        setTimeout(() => setSuccessMessage(''), 5000);\n        \n        // Notify parent that an account was added (triggers state refresh)\n        if (onAccountAdded) {\n          onAccountAdded();\n        }\n        \n        console.log('Bank account creation completed, form closed');\n      } else {\n        const errorData = await response.json();\n        console.error('Failed to save bank account:', errorData);\n        setFormErrors({ general: errorData.message || 'Failed to save bank account' });\n      }\n    } catch (error) {\n      console.error('Error saving bank account:', error);\n      setFormErrors({ general: 'Failed to save bank account. Please try again.' });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  // Handle account deletion\n  const handleDelete = async (accountId: string) => {\n    if (!confirm('Are you sure you want to delete this bank account?')) {\n      return;\n    }\n\n    try {\n      const token = await getToken();\n      const response = await fetch(\n        `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000'}/api/users/me/bank-accounts/${accountId}`,\n        {\n          method: 'DELETE',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        }\n      );\n\n      if (response.ok) {\n        await fetchBankAccounts();\n      } else {\n        console.error('Failed to delete bank account');\n      }\n    } catch (error) {\n      console.error('Error deleting bank account:', error);\n    }\n  };\n\n  // Reset form\n  const resetForm = () => {\n    setSelectedCountry('');\n    setSelectedBank(null);\n    setFormData({\n      accountName: '',\n      country: '',\n      bankId: '',\n      accountHolderName: '',\n      accountType: '',\n      isPrimary: false\n    });\n    setFormErrors({});\n    setSuccessMessage(''); // Clear success message when starting new form\n  };\n\n  // Start editing an account\n  const startEdit = (account: BankAccount) => {\n    const countryCode = account.country;\n    const config = COUNTRY_BANKING_CONFIGS[countryCode];\n    const bank = config?.banks.find(b => b.code === account.bankCode);\n\n    setSelectedCountry(countryCode);\n    setSelectedBank(bank || null);\n    \n    const editData: BankAccountFormData = {\n      accountName: account.accountName,\n      country: countryCode,\n      bankId: bank?.id || '',\n      accountHolderName: account.accountHolderName,\n      accountType: account.accountType || '',\n      isPrimary: account.isPrimary\n    };\n\n    // Add existing field values\n    if (account.iban) editData.iban = account.iban;\n    if (account.accountNumber) editData.accountNumber = account.accountNumber;\n    if (account.routingNumber) editData.routingNumber = account.routingNumber;\n    if (account.rut) editData.rut = account.rut;\n    if (account.clabe) editData.clabe = account.clabe;\n    if (account.sortCode) editData.sortCode = account.sortCode;\n    if (account.ukAccountNumber) editData.ukAccountNumber = account.ukAccountNumber;\n\n    setFormData(editData);\n    setEditingAccount(account);\n    setShowAddForm(true);\n  };\n\n  // Render country-specific form fields\n  const renderCountrySpecificFields = () => {\n    if (!countryConfig) return null;\n\n    return countryConfig.requiredFields.map(field => (\n      <div key={field.field}>\n        <Label htmlFor={field.field}>{field.label}</Label>\n        <Input\n          id={field.field}\n          type={field.type}\n          value={formData[field.field] || ''}\n          onChange={(e) => {\n            let value = e.target.value;\n            \n            // Apply formatting for specific fields\n            if (field.field === 'rut') {\n              value = formatRUT(value);\n            } else if (field.field === 'sortCode') {\n              value = formatSortCode(value);\n            }\n            \n            setFormData(prev => ({ ...prev, [field.field]: value }));\n          }}\n          placeholder={field.placeholder}\n          maxLength={field.maxLength}\n          className={formErrors[field.field] ? 'border-red-500' : ''}\n        />\n        {formErrors[field.field] && (\n          <p className=\"text-sm text-red-500 mt-1\">{formErrors[field.field]}</p>\n        )}\n      </div>\n    ));\n  };\n\n  const hasVerifiedAccount = Array.isArray(bankAccounts) && bankAccounts.some(acc => acc.isVerified);\n  const hasUnverifiedAccounts = Array.isArray(bankAccounts) && bankAccounts.length > 0 && !hasVerifiedAccount;\n\n  // Handle verification completion\n  const handleVerificationComplete = async (accountId: string) => {\n    console.log('Verification completed for account:', accountId);\n    setVerifyingAccount(null);\n    await fetchBankAccounts(); // Refresh accounts to show updated verification status\n    \n    // Check if this completes the onboarding process\n    const updatedAccounts = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000'}/api/users/me/bank-accounts`, {\n      headers: { 'Authorization': `Bearer ${await getToken()}` }\n    });\n    \n    if (updatedAccounts.ok) {\n      const responseData = await updatedAccounts.json();\n      const accounts = responseData.bankAccounts || responseData;\n      const hasVerified = Array.isArray(accounts) && accounts.some((acc: BankAccount) => acc.isVerified);\n      \n      if (hasVerified && onComplete) {\n        console.log('All requirements met, calling onComplete');\n        onComplete();\n      }\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  // Show verification flow if an account is being verified\n  if (verifyingAccount) {\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold mb-2\">Verify Bank Account</h2>\n          <p className=\"text-gray-600\">\n            Complete verification for {verifyingAccount.bankName} to start sending money.\n          </p>\n        </div>\n        \n        <BankAccountVerification\n          account={verifyingAccount}\n          onVerificationComplete={handleVerificationComplete}\n          onSkip={() => setVerifyingAccount(null)}\n        />\n        \n        <Button\n          variant=\"outline\"\n          onClick={() => setVerifyingAccount(null)}\n        >\n          ← Back to Account List\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-2xl font-bold mb-2\">\n          {hasUnverifiedAccounts ? 'Verify Your Bank Account' : 'Bank Account Setup'}\n        </h2>\n        <p className=\"text-gray-600\">\n          {hasUnverifiedAccounts \n            ? 'Complete bank account verification to start sending money globally.'\n            : 'Add and verify your bank accounts to start sending money globally.'\n          }\n        </p>\n      </div>\n\n      {/* Success Message */}\n      {successMessage && (\n        <Card className=\"border-green-200 bg-green-50\">\n          <CardContent className=\"py-4\">\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              <span className=\"font-medium text-green-700\">\n                {successMessage}\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Verification Prompt for Unverified Accounts */}\n      {hasUnverifiedAccounts && (\n        <Card className=\"border-blue-200 bg-blue-50\">\n          <CardContent className=\"py-6\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"flex items-center justify-center gap-2\">\n                <AlertCircle className=\"h-6 w-6 text-blue-600\" />\n                <span className=\"text-lg font-semibold text-blue-700\">\n                  Bank Account Added Successfully!\n                </span>\n              </div>\n              <p className=\"text-blue-600\">\n                Your account has been added but needs verification to send money. \n                Click \"Verify Account\" below to start the verification process.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Status Summary */}\n      {Array.isArray(bankAccounts) && bankAccounts.length > 0 && (\n        <Card className={hasVerifiedAccount ? 'border-green-200 bg-green-50' : 'border-amber-200 bg-amber-50'}>\n          <CardContent className=\"py-4\">\n            <div className=\"flex items-center gap-2\">\n              {hasVerifiedAccount ? (\n                <>\n                  <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                  <span className=\"font-medium text-green-700\">\n                    You have {bankAccounts.filter(acc => acc.isVerified).length} verified account(s)\n                  </span>\n                </>\n              ) : (\n                <>\n                  <AlertCircle className=\"h-5 w-5 text-amber-600\" />\n                  <span className=\"font-medium text-amber-700\">\n                    Verification required for your bank account(s)\n                  </span>\n                </>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Existing Accounts */}\n      {Array.isArray(bankAccounts) && bankAccounts.length > 0 && (\n        <div className=\"space-y-3\">\n          {bankAccounts.map((account) => (\n            <Card key={account.id} className=\"relative\">\n              <CardContent className=\"py-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <Building2 className=\"h-8 w-8 text-gray-400\" />\n                    <div>\n                      <div className=\"flex items-center gap-2\">\n                        <h4 className=\"font-semibold\">{account.accountName}</h4>\n                        {account.isPrimary && (\n                          <Badge variant=\"secondary\">Primary</Badge>\n                        )}\n                        <Badge variant={account.isVerified ? 'default' : 'outline'}>\n                          {account.isVerified ? 'Verified' : 'Pending'}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-600 mt-1\">\n                        {account.bankName} • {account.currency} • \n                        {account.accountType === 'checking' ? ' Checking' : ' Savings'}\n                      </p>\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        {COUNTRY_BANKING_CONFIGS[account.country]?.countryName}\n                      </p>\n                      {!account.isVerified && (\n                        <p className=\"text-xs text-amber-600 mt-1 flex items-center gap-1\">\n                          <AlertCircle className=\"h-3 w-3\" />\n                          Verification required to send money\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {!account.isVerified && (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"border-blue-500 text-blue-600 hover:bg-blue-50\"\n                        onClick={() => {\n                          setVerifyingAccount(account);\n                        }}\n                      >\n                        Verify Account\n                      </Button>\n                    )}\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => startEdit(account)}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(account.id)}\n                    >\n                      <Trash2 className=\"h-4 w-4 text-red-500\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Add New Account Button */}\n      {!showAddForm && (\n        <div className=\"flex gap-3\">\n          <Button\n            onClick={() => {\n              resetForm();\n              setShowAddForm(true);\n            }}\n            className=\"flex-1\"\n            variant={hasUnverifiedAccounts ? \"ghost\" : \"outline\"}\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            {hasUnverifiedAccounts ? \"Add Another Account\" : \"Add Bank Account\"}\n          </Button>\n          \n          {onSkip && !requireVerification && !hasUnverifiedAccounts && (\n            <Button\n              onClick={onSkip}\n              variant=\"ghost\"\n            >\n              Skip for now\n            </Button>\n          )}\n        </div>\n      )}\n\n      {/* Add/Edit Form */}\n      {showAddForm && (\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              {editingAccount ? 'Edit Bank Account' : 'Add New Bank Account'}\n            </CardTitle>\n            <CardDescription>\n              Select your country first, then choose your bank and provide account details.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {formErrors.general && (\n                <div className=\"p-3 bg-red-50 border border-red-200 rounded-md\">\n                  <p className=\"text-sm text-red-600\">{formErrors.general}</p>\n                </div>\n              )}\n\n              {/* Step 1: Country Selection */}\n              <div className=\"space-y-4 p-4 border rounded-lg\">\n                <div className=\"flex items-center gap-2 text-sm font-medium text-gray-700\">\n                  <Globe className=\"h-4 w-4\" />\n                  <span>Step 1: Select Your Country</span>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"country\">Country</Label>\n                  <Select\n                    value={selectedCountry}\n                    onValueChange={handleCountryChange}\n                  >\n                    <SelectTrigger className={formErrors.country ? 'border-red-500' : ''}>\n                      <SelectValue placeholder=\"Choose your country\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Object.values(COUNTRY_BANKING_CONFIGS)\n                        .sort((a, b) => a.countryName.localeCompare(b.countryName))\n                        .map((config) => (\n                          <SelectItem key={config.countryCode} value={config.countryCode}>\n                            <span className=\"flex items-center gap-2\">\n                              <span>{config.flag}</span>\n                              <span>{config.countryName}</span>\n                              <span className=\"text-gray-500\">({config.currency})</span>\n                            </span>\n                          </SelectItem>\n                        ))}\n                    </SelectContent>\n                  </Select>\n                  {formErrors.country && (\n                    <p className=\"text-sm text-red-500 mt-1\">{formErrors.country}</p>\n                  )}\n                </div>\n              </div>\n\n              {/* Step 2: Bank Selection */}\n              {selectedCountry && countryConfig && (\n                <div className=\"space-y-4 p-4 border rounded-lg\">\n                  <div className=\"flex items-center gap-2 text-sm font-medium text-gray-700\">\n                    <Building2 className=\"h-4 w-4\" />\n                    <span>Step 2: Select Your Bank</span>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"bank\">Bank</Label>\n                    <Select\n                      value={formData.bankId}\n                      onValueChange={handleBankChange}\n                    >\n                      <SelectTrigger className={formErrors.bankId ? 'border-red-500' : ''}>\n                        <SelectValue placeholder=\"Choose your bank\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {countryConfig.banks.map((bank) => (\n                          <SelectItem key={bank.id} value={bank.id}>\n                            {bank.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    {formErrors.bankId && (\n                      <p className=\"text-sm text-red-500 mt-1\">{formErrors.bankId}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"accountType\">Account Type</Label>\n                    <Select\n                      value={formData.accountType}\n                      onValueChange={(value) => setFormData(prev => ({ ...prev, accountType: value }))}\n                    >\n                      <SelectTrigger className={formErrors.accountType ? 'border-red-500' : ''}>\n                        <SelectValue placeholder=\"Select account type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {countryConfig.accountTypes.map((type) => (\n                          <SelectItem key={type.value} value={type.value}>\n                            {type.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    {formErrors.accountType && (\n                      <p className=\"text-sm text-red-500 mt-1\">{formErrors.accountType}</p>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {/* Step 3: Account Details */}\n              {selectedBank && countryConfig && (\n                <div className=\"space-y-4 p-4 border rounded-lg\">\n                  <div className=\"flex items-center gap-2 text-sm font-medium text-gray-700\">\n                    <CreditCard className=\"h-4 w-4\" />\n                    <span>Step 3: Account Details</span>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"accountName\">Account Nickname</Label>\n                    <Input\n                      id=\"accountName\"\n                      value={formData.accountName}\n                      onChange={(e) => setFormData(prev => ({ ...prev, accountName: e.target.value }))}\n                      placeholder=\"e.g., My Chilean Account\"\n                      className={formErrors.accountName ? 'border-red-500' : ''}\n                    />\n                    {formErrors.accountName && (\n                      <p className=\"text-sm text-red-500 mt-1\">{formErrors.accountName}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"accountHolderName\">Account Holder Name</Label>\n                    <Input\n                      id=\"accountHolderName\"\n                      value={formData.accountHolderName}\n                      onChange={(e) => setFormData(prev => ({ ...prev, accountHolderName: e.target.value }))}\n                      placeholder=\"Full name as it appears on the account\"\n                      className={formErrors.accountHolderName ? 'border-red-500' : ''}\n                    />\n                    {formErrors.accountHolderName && (\n                      <p className=\"text-sm text-red-500 mt-1\">{formErrors.accountHolderName}</p>\n                    )}\n                  </div>\n\n                  {/* Country-specific fields */}\n                  {renderCountrySpecificFields()}\n\n                  {/* Primary Account Toggle */}\n                  {Array.isArray(bankAccounts) && bankAccounts.length > 0 && (\n                    <div className=\"flex items-center space-x-2\">\n                      <input\n                        type=\"checkbox\"\n                        id=\"isPrimary\"\n                        checked={formData.isPrimary}\n                        onChange={(e) => setFormData(prev => ({ ...prev, isPrimary: e.target.checked }))}\n                        className=\"rounded border-gray-300\"\n                      />\n                      <Label htmlFor=\"isPrimary\" className=\"text-sm font-normal\">\n                        Set as primary account for {countryConfig.currency}\n                      </Label>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Form Actions */}\n              <div className=\"flex gap-3\">\n                <Button type=\"submit\" disabled={submitting} className=\"flex-1\">\n                  {submitting ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Saving...\n                    </>\n                  ) : (\n                    editingAccount ? 'Update Account' : 'Add Account'\n                  )}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setShowAddForm(false);\n                    setEditingAccount(null);\n                    resetForm();\n                  }}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 10442, "column": 0}, "map": {"version":3,"sources":["file:///home/faros/stealth-money/packages/web/src/components/features/OnboardingGate.tsx"],"sourcesContent":["// src/components/features/OnboardingGate.tsx\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useAuth } from '@clerk/nextjs';\nimport BankAccountOnboardingV2 from './BankAccountOnboardingV2';\n\ninterface BankAccount {\n  id: string;\n  currency: string;\n  isVerified: boolean;\n  isActive: boolean;\n}\n\ninterface OnboardingGateProps {\n  children: React.ReactNode;\n  requireVerification?: boolean;\n  onOnboardingComplete?: () => void;\n  skipCheckOnPublicPages?: boolean;\n  blockTransfersUntilVerified?: boolean; // New prop to enforce verification for transfers\n}\n\nexport default function OnboardingGate({ \n  children, \n  requireVerification = false,\n  onOnboardingComplete,\n  skipCheckOnPublicPages = false,\n  blockTransfersUntilVerified = false\n}: OnboardingGateProps) {\n  const { getToken } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [needsOnboarding, setNeedsOnboarding] = useState(false);\n  const [bankAccounts, setBankAccounts] = useState<BankAccount[]>([]);\n\n  useEffect(() => {\n    if (skipCheckOnPublicPages) {\n      setLoading(false);\n      setNeedsOnboarding(false);\n    } else {\n      checkOnboardingStatus();\n    }\n  }, [skipCheckOnPublicPages]);\n\n  const checkOnboardingStatus = async () => {\n    try {\n      setLoading(true);\n      \n      // Check if API is available and if we're on the client side\n      if (typeof window === 'undefined') {\n        setNeedsOnboarding(false);\n        return;\n      }\n\n      const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000';\n      \n      // Get authentication token\n      const token = await getToken();\n      if (!token) {\n        // User not authenticated, let them proceed (auth will be handled elsewhere)\n        setNeedsOnboarding(false);\n        return;\n      }\n      \n      // Add a timeout to prevent hanging\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\n      \n      try {\n        const response = await fetch(`${API_URL}/api/users/me/bank-accounts`, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          signal: controller.signal\n        });\n\n        clearTimeout(timeoutId);\n\n        if (response.ok) {\n          const responseData = await response.json();\n          console.log('OnboardingGate: Fetched response:', responseData);\n          \n          // Handle both response formats: array or { bankAccounts: [...] }\n          const accounts = responseData.bankAccounts || responseData;\n          const accountsArray = Array.isArray(accounts) ? accounts : [];\n          setBankAccounts(accountsArray);\n          \n          // Check if user needs onboarding\n          const hasAccounts = accountsArray.length > 0;\n          const hasVerifiedAccount = accountsArray.some((account: BankAccount) => account.isVerified);\n          \n          console.log('OnboardingGate: Has accounts:', hasAccounts, 'Has verified:', hasVerifiedAccount);\n          \n          // For transfer flows, always require verified accounts\n          if (requireVerification || blockTransfersUntilVerified) {\n            const needsOnboarding = !hasVerifiedAccount;\n            console.log('OnboardingGate: Transfer flow - needs onboarding:', needsOnboarding);\n            setNeedsOnboarding(needsOnboarding);\n          } else {\n            const needsOnboarding = !hasAccounts;\n            console.log('OnboardingGate: Regular flow - needs onboarding:', needsOnboarding);\n            setNeedsOnboarding(needsOnboarding);\n          }\n        } else if (response.status === 401) {\n          // User not authenticated, let them proceed (auth will be handled elsewhere)\n          setNeedsOnboarding(false);\n        } else {\n          // API error - don't block user, just log the issue\n          console.warn('Onboarding status check failed:', response.status, response.statusText);\n          setNeedsOnboarding(false);\n        }\n      } catch (fetchError) {\n        clearTimeout(timeoutId);\n        throw fetchError;\n      }\n    } catch (error) {\n      // Network error or API not available - don't block user\n      if (error instanceof Error && error.name === 'AbortError') {\n        console.warn('Onboarding status check timed out (API may be slow or unavailable)');\n      } else {\n        console.warn('Onboarding status check error (API may not be running):', error);\n      }\n      setNeedsOnboarding(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleOnboardingComplete = () => {\n    console.log('OnboardingGate: Onboarding completed, refreshing status...');\n    // Refresh the onboarding status\n    checkOnboardingStatus();\n    if (onOnboardingComplete) {\n      onOnboardingComplete();\n    }\n  };\n\n  const handleAccountAdded = () => {\n    console.log('OnboardingGate: Account added, refreshing status...');\n    // Refresh the onboarding status when an account is added\n    checkOnboardingStatus();\n  };\n\n  const handleSkip = () => {\n    // Only allow skipping if not required for transfers\n    if (!blockTransfersUntilVerified) {\n      setNeedsOnboarding(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[200px]\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n          <p className=\"text-gray-600\">Checking account status...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (needsOnboarding) {\n    return (\n      <BankAccountOnboardingV2\n        onComplete={handleOnboardingComplete}\n        onSkip={(!requireVerification && !blockTransfersUntilVerified) ? handleSkip : undefined}\n        requireVerification={requireVerification || blockTransfersUntilVerified}\n        onAccountAdded={handleAccountAdded}\n      />\n    );\n  }\n\n  return <>{children}</>;\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 10632, "column": 0}, "map": {"version":3,"sources":["file:///home/faros/stealth-money/packages/web/src/app/transfer/process/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport { useUser, useAuth } from '@clerk/nextjs';\nimport { useRouter } from \"next/navigation\";\nimport { TransferCalculator } from \"@/components/features/TransferCalculator\";\nimport { UserRecipientSelector } from \"@/components/features/UserRecipientSelector\";\nimport { EnhancedPaymentForm } from \"@/components/features/PaymentForm\";\nimport { TransferStatus } from \"@/components/features/TransferStatus\";\nimport { ProgressIndicator } from \"@/components/features/ProgressIndicator\";\nimport OnboardingGate from \"@/components/features/OnboardingGate\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, AlertCircle, Users, Calculator } from \"lucide-react\";\n\n// Types for the transfer process\nexport type TransferStep = 'calculator' | 'recipient' | 'payment' | 'status';\n\ninterface UserProfile {\n  id: string;\n  email: string;\n  username?: string;\n  phone?: string;\n  firstName?: string;\n  lastName?: string;\n  fullName: string;\n  profileImageUrl?: string;\n  isVerified: boolean;\n  verifiedPaymentMethods: VerifiedPaymentMethod[];\n  supportedCurrencies: string[];\n  lastActiveAt?: string;\n  createdAt: string;\n}\n\ninterface VerifiedPaymentMethod {\n  id: string;\n  type: 'bank_account' | 'mobile_wallet' | 'debit_card';\n  currency: string;\n  bankName?: string;\n  accountType?: string;\n  lastFourDigits?: string;\n  isDefault: boolean;\n  verifiedAt: string;\n  country: string;\n}\n\ninterface TransferCalculationData {\n  sendAmount: number;\n  receiveAmount: number;\n  sendCurrency: string;\n  receiveCurrency: string;\n  exchangeRate: number;\n  fees: number;\n  rateId: string;\n  rateValidUntil: string;\n  calculatorMode: 'send' | 'receive';\n  breakdown: {\n    sendAmountUSD: number;\n    fees: {\n      cardProcessing: number;\n      transfer: number;\n      payout: number;\n      total: number;\n    };\n    netAmountUSD: number;\n    exchangeRate: number;\n    receiveAmount: number;\n  };\n  estimatedArrival: string;\n}\n\ninterface TransferProcessState {\n  currentStep: TransferStep;\n  transferData: TransferCalculationData | null;\n  recipientUser: UserProfile | null;\n  selectedPaymentMethod: VerifiedPaymentMethod | null;\n  transferId: string | null;\n  completedSteps: TransferStep[];\n  canGoBack: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport default function TransferProcessPage() {\n  const { user, isLoaded } = useUser();\n  const { getToken } = useAuth();\n  const router = useRouter();\n\n  // Transfer process state\n  const [state, setState] = useState<TransferProcessState>({\n    currentStep: 'calculator',\n    transferData: null,\n    recipientUser: null,\n    selectedPaymentMethod: null,\n    transferId: null,\n    completedSteps: [],\n    canGoBack: false,\n    isLoading: false,\n    error: null,\n  });\n\n  // Load transfer data from sessionStorage on mount\n  useEffect(() => {\n    const savedCalculation = sessionStorage.getItem('transferCalculation');\n    if (savedCalculation) {\n      try {\n        const calculationData = JSON.parse(savedCalculation);\n        setState(prev => ({\n          ...prev,\n          transferData: calculationData,\n          completedSteps: ['calculator'],\n          currentStep: 'recipient',\n          canGoBack: true\n        }));\n        // Clear from sessionStorage since we've loaded it\n        sessionStorage.removeItem('transferCalculation');\n      } catch (error) {\n        console.error('Failed to parse saved calculation:', error);\n      }\n    }\n  }, []);\n\n  // Helper function to update state\n  const updateState = useCallback((updates: Partial<TransferProcessState>) => {\n    setState(prev => ({ ...prev, ...updates }));\n  }, []);\n\n  // Navigation helpers\n  const goToStep = useCallback((step: TransferStep) => {\n    updateState({ \n      currentStep: step,\n      canGoBack: step !== 'calculator',\n      error: null \n    });\n  }, [updateState]);\n\n  const goBack = useCallback(() => {\n    const stepOrder: TransferStep[] = ['calculator', 'recipient', 'payment', 'status'];\n    const currentIndex = stepOrder.indexOf(state.currentStep);\n    \n    if (currentIndex > 0) {\n      const previousStep = stepOrder[currentIndex - 1];\n      goToStep(previousStep);\n    } else {\n      // Go back to main landing page\n      router.push('/');\n    }\n  }, [state.currentStep, goToStep, router]);\n\n  const markStepCompleted = useCallback((step: TransferStep) => {\n    setState(prev => ({\n      ...prev,\n      completedSteps: prev.completedSteps.includes(step) \n        ? prev.completedSteps \n        : [...prev.completedSteps, step]\n    }));\n  }, []);\n\n  // Step 1: Calculator completion\n  const handleCalculatorContinue = useCallback((data: {\n    sendAmount: number;\n    receiveAmount: number;\n    sendCurrency: string;\n    receiveCurrency: string;\n    exchangeRate: number;\n    fees: number;\n    rateId: string;\n    rateValidUntil: string;\n    calculatorMode: 'send' | 'receive';\n    breakdown: any;\n    estimatedArrival: string;\n  }) => {\n    const transferData: TransferCalculationData = {\n      sendAmount: data.sendAmount,\n      receiveAmount: data.receiveAmount,\n      sendCurrency: data.sendCurrency,\n      receiveCurrency: data.receiveCurrency,\n      exchangeRate: data.exchangeRate,\n      fees: data.fees,\n      rateId: data.rateId,\n      rateValidUntil: data.rateValidUntil,\n      calculatorMode: data.calculatorMode,\n      breakdown: data.breakdown,\n      estimatedArrival: data.estimatedArrival,\n    };\n\n    updateState({ \n      transferData: transferData,\n      isLoading: true \n    });\n    \n    markStepCompleted('calculator');\n    \n    setTimeout(() => {\n      updateState({ isLoading: false });\n      goToStep('recipient');\n    }, 500);\n  }, [updateState, markStepCompleted, goToStep]);\n\n  // Step 2: Recipient selection\n  const handleRecipientSelected = useCallback((recipient: UserProfile, paymentMethod: VerifiedPaymentMethod) => {\n    updateState({ \n      recipientUser: recipient,\n      selectedPaymentMethod: paymentMethod,\n      isLoading: true \n    });\n    \n    markStepCompleted('recipient');\n    \n    setTimeout(() => {\n      updateState({ isLoading: false });\n      goToStep('payment');\n    }, 500);\n  }, [updateState, markStepCompleted, goToStep]);\n\n  // Step 3: Payment completion\n  const handlePaymentSuccess = useCallback(async (transferId: string) => {\n    markStepCompleted('payment');\n    \n    updateState({ \n      transferId,\n      isLoading: false \n    });\n    \n    goToStep('status');\n  }, [markStepCompleted, updateState, goToStep]);\n\n  // Payment error handler\n  const handlePaymentError = useCallback((error: string) => {\n    updateState({ \n      error,\n      isLoading: false \n    });\n  }, [updateState]);\n\n  // Render step content based on current step\n  const renderStepContent = () => {\n    switch (state.currentStep) {\n      case 'calculator':\n        return (\n          <div className=\"space-y-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <Calculator className=\"h-6 w-6 text-blue-600\" />\n                  <h2 className=\"text-xl font-semibold\">Calculate Your Transfer</h2>\n                </div>\n                <p className=\"text-gray-600\">\n                  Enter the amount you want to send and see the real-time exchange rate and fees.\n                </p>\n              </CardContent>\n            </Card>\n            <TransferCalculator\n              onContinue={handleCalculatorContinue}\n              isNavigating={state.isLoading}\n            />\n          </div>\n        );\n      \n      case 'recipient':\n        if (!state.transferData) {\n          return (\n            <Card className=\"w-full max-w-lg mx-auto\">\n              <CardContent className=\"py-8 text-center\">\n                <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-red-700 mb-2\">Missing Transfer Data</h3>\n                <p className=\"text-red-600 mb-4\">Please complete the calculator step first.</p>\n                <Button onClick={() => goToStep('calculator')} variant=\"outline\">\n                  Go to Calculator\n                </Button>\n              </CardContent>\n            </Card>\n          );\n        }\n        \n        return (\n          <UserRecipientSelector\n            transferData={{\n              sendAmount: state.transferData.sendAmount,\n              receiveAmount: state.transferData.receiveAmount,\n              sendCurrency: state.transferData.sendCurrency,\n              receiveCurrency: state.transferData.receiveCurrency,\n              exchangeRate: state.transferData.exchangeRate,\n              fees: state.transferData.fees,\n            }}\n            onRecipientSelected={handleRecipientSelected}\n            onBack={goBack}\n            currentUserId={user?.id}\n            isLoading={state.isLoading}\n          />\n        );\n      \n      case 'payment':\n        if (!state.transferData || !state.recipientUser || !state.selectedPaymentMethod) {\n          return (\n            <Card className=\"w-full max-w-lg mx-auto\">\n              <CardContent className=\"py-8 text-center\">\n                <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-red-700 mb-2\">Missing Required Data</h3>\n                <p className=\"text-red-600 mb-4\">\n                  Please complete the previous steps first.\n                </p>\n                <Button onClick={() => goToStep('calculator')} variant=\"outline\">\n                  Start Over\n                </Button>\n              </CardContent>\n            </Card>\n          );\n        }\n        \n        return (\n          <EnhancedPaymentForm\n            transferData={state.transferData}\n            recipientUser={state.recipientUser}\n            selectedPaymentMethod={state.selectedPaymentMethod}\n            onSuccess={handlePaymentSuccess}\n            onBack={goBack}\n            onError={handlePaymentError}\n            isLoading={state.isLoading}\n          />\n        );\n      \n      case 'status':\n        if (!state.transferId) {\n          return (\n            <Card className=\"w-full max-w-lg mx-auto\">\n              <CardContent className=\"py-8 text-center\">\n                <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-red-700 mb-2\">No Transfer Found</h3>\n                <p className=\"text-red-600 mb-4\">Transfer ID is missing.</p>\n                <Button onClick={() => goToStep('calculator')} variant=\"outline\">\n                  Start New Transfer\n                </Button>\n              </CardContent>\n            </Card>\n          );\n        }\n        \n        return (\n          <TransferStatus\n            transferId={state.transferId}\n            onRefresh={() => {}}\n            autoRefresh={true}\n          />\n        );\n      \n      default:\n        return (\n          <Card className=\"w-full max-w-lg mx-auto\">\n            <CardContent className=\"py-8 text-center\">\n              <AlertCircle className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">Unknown Step</h3>\n              <p className=\"text-gray-600 mb-4\">Invalid step: {state.currentStep}</p>\n              <Button onClick={() => goToStep('calculator')} variant=\"outline\">\n                Start Over\n              </Button>\n            </CardContent>\n          </Card>\n        );\n    }\n  };\n\n  if (!isLoaded) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <OnboardingGate \n      requireVerification={false} \n      skipCheckOnPublicPages={false}\n      blockTransfersUntilVerified={true}\n    >\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"w-full max-w-4xl mx-auto space-y-6\">\n            {/* Header */}\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                Complete Your Transfer\n              </h1>\n              <p className=\"text-gray-600\">\n                {!user ? 'Sign in to continue with your transfer' : \n                 'Follow the steps below to send your money securely'}\n              </p>\n            </div>\n\n            {/* Progress Indicator */}\n            <ProgressIndicator\n              currentStep={state.currentStep}\n              completedSteps={state.completedSteps}\n              onStepClick={(step) => {\n                if (state.completedSteps.includes(step as TransferStep) || step === state.currentStep) {\n                  goToStep(step as TransferStep);\n                }\n              }}\n            />\n            \n            {/* Back Button (except for status step) */}\n            {state.canGoBack && state.currentStep !== 'status' && (\n              <div className=\"flex justify-start\">\n                <Button\n                  variant=\"outline\"\n                  onClick={goBack}\n                  disabled={state.isLoading}\n                  className=\"flex items-center gap-2\"\n                >\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  Back\n                </Button>\n              </div>\n            )}\n            \n            {/* Global Error Display */}\n            {state.error && (\n              <Card className=\"border-red-200 bg-red-50\">\n                <CardContent className=\"py-4\">\n                  <div className=\"flex items-center gap-2 text-red-700\">\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <span className=\"font-medium\">Error</span>\n                  </div>\n                  <p className=\"text-red-600 mt-1\">{state.error}</p>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => updateState({ error: null })}\n                    className=\"mt-2\"\n                  >\n                    Dismiss\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n            \n            {/* Step Content */}\n            <div className=\"relative\">\n              {state.isLoading && (\n                <div className=\"absolute inset-0 bg-white/80 backdrop-blur-sm z-10 flex items-center justify-center rounded-lg\">\n                  <div className=\"text-center\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n                    <p className=\"text-sm text-gray-600\">Processing...</p>\n                  </div>\n                </div>\n              )}\n              \n              {renderStepContent()}\n            </div>\n          </div>\n        </div>\n      </div>\n    </OnboardingGate>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}