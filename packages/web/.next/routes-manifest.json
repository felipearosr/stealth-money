{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "dynamicRoutes": [
    {
      "page": "/auth/sign-in/[[...sign-in]]",
      "regex": "^/auth/sign\\-in(?:/(.+?))?(?:/)?$",
      "routeKeys": {
        "nxtPsignin": "nxtPsign-in"
      },
      "namedRegex": "^/auth/sign\\-in(?:/(?<nxtPsignin>.+?))?(?:/)?$"
    },
    {
      "page": "/auth/sign-up/[[...sign-up]]",
      "regex": "^/auth/sign\\-up(?:/(.+?))?(?:/)?$",
      "routeKeys": {
        "nxtPsignup": "nxtPsign-up"
      },
      "namedRegex": "^/auth/sign\\-up(?:/(?<nxtPsignup>.+?))?(?:/)?$"
    },
    {
      "page": "/pay/[transactionId]",
      "regex": "^/pay/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPtransactionId": "nxtPtransactionId"
      },
      "namedRegex": "^/pay/(?<nxtPtransactionId>[^/]+?)(?:/)?$"
    },
    {
      "page": "/recipient/[transactionId]",
      "regex": "^/recipient/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPtransactionId": "nxtPtransactionId"
      },
      "namedRegex": "^/recipient/(?<nxtPtransactionId>[^/]+?)(?:/)?$"
    },
    {
      "page": "/status/[transactionId]",
      "regex": "^/status/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPtransactionId": "nxtPtransactionId"
      },
      "namedRegex": "^/status/(?<nxtPtransactionId>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/cookathon-demo",
      "regex": "^/cookathon\\-demo(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/cookathon\\-demo(?:/)?$"
    },
    {
      "page": "/dashboard",
      "regex": "^/dashboard(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/dashboard(?:/)?$"
    },
    {
      "page": "/favicon.ico",
      "regex": "^/favicon\\.ico(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/favicon\\.ico(?:/)?$"
    },
    {
      "page": "/mvp-demo",
      "regex": "^/mvp\\-demo(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/mvp\\-demo(?:/)?$"
    },
    {
      "page": "/pricing",
      "regex": "^/pricing(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/pricing(?:/)?$"
    },
    {
      "page": "/test-calculator",
      "regex": "^/test\\-calculator(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/test\\-calculator(?:/)?$"
    },
    {
      "page": "/test-chilean-onboarding",
      "regex": "^/test\\-chilean\\-onboarding(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/test\\-chilean\\-onboarding(?:/)?$"
    },
    {
      "page": "/test-enhanced-calculator",
      "regex": "^/test\\-enhanced\\-calculator(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/test\\-enhanced\\-calculator(?:/)?$"
    },
    {
      "page": "/test-flow",
      "regex": "^/test\\-flow(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/test\\-flow(?:/)?$"
    },
    {
      "page": "/test-user-recipient",
      "regex": "^/test\\-user\\-recipient(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/test\\-user\\-recipient(?:/)?$"
    },
    {
      "page": "/transfer/process",
      "regex": "^/transfer/process(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/transfer/process(?:/)?$"
    },
    {
      "page": "/transfer/user",
      "regex": "^/transfer/user(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/transfer/user(?:/)?$"
    },
    {
      "page": "/user-transfer",
      "regex": "^/user\\-transfer(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/user\\-transfer(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": []
}