/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  TransferManager,
  TransferManagerInterface,
} from "../../contracts/TransferManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516107cb3803806107cb83398181016040528101906100329190610285565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100a55760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161009c91906102c1565b60405180910390fd5b6100b48161015e60201b60201c565b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610124576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011b90610339565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050610359565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061025282610227565b9050919050565b61026281610247565b811461026d57600080fd5b50565b60008151905061027f81610259565b92915050565b60006020828403121561029b5761029a610222565b5b60006102a984828501610270565b91505092915050565b6102bb81610247565b82525050565b60006020820190506102d660008301846102b2565b92915050565b600082825260208201905092915050565b7f546f6b656e20616464726573732063616e6e6f74206265207a65726f00000000600082015250565b6000610323601c836102dc565b915061032e826102ed565b602082019050919050565b6000602082019050818103600083015261035281610316565b9050919050565b608051610457610374600039600061017801526104576000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063715018a6146100515780638da5cb5b1461005b578063f2fde38b14610079578063fc0c546a14610095575b600080fd5b6100596100b3565b005b6100636100c7565b604051610070919061032e565b60405180910390f35b610093600480360381019061008e919061037a565b6100f0565b005b61009d610176565b6040516100aa9190610406565b60405180910390f35b6100bb61019a565b6100c56000610221565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6100f861019a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361016a5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610161919061032e565b60405180910390fd5b61017381610221565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b6101a26102e5565b73ffffffffffffffffffffffffffffffffffffffff166101c06100c7565b73ffffffffffffffffffffffffffffffffffffffff161461021f576101e36102e5565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610216919061032e565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610318826102ed565b9050919050565b6103288161030d565b82525050565b6000602082019050610343600083018461031f565b92915050565b600080fd5b6103578161030d565b811461036257600080fd5b50565b6000813590506103748161034e565b92915050565b6000602082840312156103905761038f610349565b5b600061039e84828501610365565b91505092915050565b6000819050919050565b60006103cc6103c76103c2846102ed565b6103a7565b6102ed565b9050919050565b60006103de826103b1565b9050919050565b60006103f0826103d3565b9050919050565b610400816103e5565b82525050565b600060208201905061041b60008301846103f7565b9291505056fea26469706673582212204e9599eaa9458535bf284f6a14c1fef52898896b025bdafda34b660152f474ac64736f6c63430008140033";

type TransferManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TransferManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TransferManager__factory extends ContractFactory {
  constructor(...args: TransferManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _token: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_token, overrides || {});
  }
  override deploy(
    _token: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_token, overrides || {}) as Promise<
      TransferManager & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TransferManager__factory {
    return super.connect(runner) as TransferManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TransferManagerInterface {
    return new Interface(_abi) as TransferManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TransferManager {
    return new Contract(address, _abi, runner) as unknown as TransferManager;
  }
}
